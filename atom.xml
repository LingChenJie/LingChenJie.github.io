<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JieChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lingchenjie.club/"/>
  <updated>2018-04-10T09:08:42.240Z</updated>
  <id>http://lingchenjie.club/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL与JDBC的回顾</title>
    <link href="http://lingchenjie.club/2018/04/10/MySQL%E4%B8%8EJDBC%E5%9B%9E%E9%A1%BE/"/>
    <id>http://lingchenjie.club/2018/04/10/MySQL与JDBC回顾/</id>
    <published>2018-04-10T07:01:09.000Z</published>
    <updated>2018-04-10T09:08:42.240Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><h4 id="对数据库的操作"><a href="#对数据库的操作" class="headerlink" title="对数据库的操作"></a>对数据库的操作</h4><p>1.创建一个数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database my_db;<span class="comment"># 创建名为 my_db 的数据库</span></span><br><span class="line">create database my_db <span class="built_in">set</span> utf-8;<span class="comment"># 创建名为 my_db 的数据库，编码为 utf-8</span></span><br></pre></td></tr></table></figure></p><p>2.删除一个数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database my_db;<span class="comment"># 删除名为 my_db 的数据库</span></span><br></pre></td></tr></table></figure></p><p>3.使用某个数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use my_db;<span class="comment"># 使用 my_db 这个数据库</span></span><br></pre></td></tr></table></figure></p><p>4.查看当前正在使用的数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();<span class="comment"># 查看当前使用的库</span></span><br></pre></td></tr></table></figure></p><h4 id="对数据库中表的操作"><a href="#对数据库中表的操作" class="headerlink" title="对数据库中表的操作"></a>对数据库中表的操作</h4><p>1.创建一张表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一张 user 表</span></span><br><span class="line">create table user(</span><br><span class="line">uid int(32) primary key auto_increment,</span><br><span class="line">uname varchar(32),</span><br><span class="line">upassword varchar(32)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>2.对表的操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">show tables; <span class="comment"># 查看有哪些表</span></span><br><span class="line">desc user;<span class="comment"># 查看表结构</span></span><br><span class="line">drop table user;<span class="comment"># 删除 user 表</span></span><br><span class="line"></span><br><span class="line">alter table user add uinfo varcher(32) not null;<span class="comment"># 添加一列</span></span><br><span class="line">alter table user modify uinfo varchar(100) null;<span class="comment"># 修改列的类型</span></span><br><span class="line">alter table user change uinfo info varchar(32) not null;<span class="comment"># 修改表的列名</span></span><br><span class="line"></span><br><span class="line">alter table user drop info;<span class="comment"># 删除表的列</span></span><br><span class="line">rename table user to t_user;<span class="comment"># 修改表名</span></span><br><span class="line">alter table user character <span class="built_in">set</span> gbk;<span class="comment"># 修改表的字符集</span></span><br><span class="line"></span><br><span class="line">show create table user;<span class="comment"># 查看表的创建</span></span><br></pre></td></tr></table></figure></p><p>3.对表记录的操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">insert into user(uid,uname,upassword) values(null,<span class="string">'jiechen'</span>,<span class="string">'123456'</span>);<span class="comment"># 插入一条记录</span></span><br><span class="line">insert into user values(null,<span class="string">'jiechen'</span>,<span class="string">'123456'</span>);<span class="comment"># 插入一条记录</span></span><br><span class="line"><span class="built_in">set</span> names gbk;<span class="comment"># 解决插入数据中文乱码问题</span></span><br><span class="line"></span><br><span class="line">update user <span class="built_in">set</span> upassword=<span class="string">'654321'</span> <span class="built_in">where</span> uid=1;<span class="comment"># 更新</span></span><br><span class="line">delete from user <span class="built_in">where</span> uid=1;<span class="comment"># 删除</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注：delete 与 truncate 的区别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete 删除的时候是一条一条的删除记录，它配合事务，可以将删除的数据找回</span><br><span class="line">truncate 删除是将整个表摧毁，然后再创建一张一模一样的表，它删除的数据无法找回</span><br></pre></td></tr></table></figure></p></blockquote><p>4.表的查询<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">select * from user;</span><br><span class="line">select uname,upassword from user;</span><br><span class="line"></span><br><span class="line">select distinct(price) from product;<span class="comment"># 去掉重复值(按照价格)</span></span><br><span class="line">select * from user wehre uname=<span class="string">'jiechen'</span>;<span class="comment"># 条件查询</span></span><br><span class="line">select * from user <span class="built_in">where</span> uid <span class="keyword">in</span>(1,2,3);<span class="comment"># 查询 uid 为1,2,3</span></span><br><span class="line"></span><br><span class="line">select * from user order by uid asc;<span class="comment"># 根据 uid 升序查询，默认升序</span></span><br><span class="line">select * from user order by uid desc;<span class="comment"># 降序查询</span></span><br><span class="line"></span><br><span class="line">select sum(price) from product;<span class="comment"># 计算总和，聚合函数 sum/avg/count</span></span><br><span class="line">seelct id,avg(age) from user group by uid having avg(age)&gt;20;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询模板</span></span><br><span class="line">select</span><br><span class="line"></span><br><span class="line">from</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span></span><br><span class="line"></span><br><span class="line">group by</span><br><span class="line"></span><br><span class="line">having <span class="comment"># 分组后带有条件只能使用having</span></span><br><span class="line"></span><br><span class="line">order by</span><br></pre></td></tr></table></figure></p><h4 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a>什么是JDBC</h4><p>JDBC（Java DataBase Connectivity）就是 Java 数据库连接，JDBC 是用 Java 语言向数据库发送 SQL 语句.JDBC是接口，而JDBC驱动才是接口的实现，没有驱动无法完成数据库连接！每个数据库厂商都有自己的驱动，用来连接自己公司的数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/my_db"</span>;</span><br><span class="line"><span class="keyword">return</span> DriverManager.getConnection(url, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">Connection con = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">con = getConnection();</span><br><span class="line">stmt = con.createStatement();</span><br><span class="line">String sql = <span class="string">"SELECT * FROM user WHERE username= ? and password= ?"</span>;</span><br><span class="line">pstmt = con.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">pstmt.setString(<span class="number">1</span>, username);</span><br><span class="line">pstmt.setString(<span class="number">2</span>, password);</span><br><span class="line">pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">System.out.println(<span class="string">"欢迎"</span> + rs.getString(<span class="string">"username"</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>) rs.close();</span><br><span class="line"><span class="keyword">if</span>(pstmt != <span class="keyword">null</span>) pstmt.close();</span><br><span class="line"><span class="keyword">if</span>(con != <span class="keyword">null</span>) con.close();</span><br><span class="line">&#125; <span class="keyword">catch</span>(SQLException e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      回顾MySQL与JDBC
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="MySQL" scheme="http://lingchenjie.club/tags/MySQL/"/>
    
      <category term="JDBC" scheme="http://lingchenjie.club/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习记录</title>
    <link href="http://lingchenjie.club/2018/04/09/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/04/09/Linux学习记录/</id>
    <published>2018-04-09T09:26:56.000Z</published>
    <updated>2018-04-10T03:43:11.080Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>Linux 是基于 Unix 的开源免费的操作系统，由于系统的稳定性和安全性几乎成为程序代码运行的最佳系统环境。我们熟知的 Android 程序最底层就是运行在 linux 系统上的</p><h4 id="Linux-的安装"><a href="#Linux-的安装" class="headerlink" title="Linux 的安装"></a>Linux 的安装</h4><p>1.虚拟机的选择</p><blockquote><p>   本文使用的是 VMware</p></blockquote><p>2.Linux版本的选择</p><blockquote><p>   本文使用的是 CentOS 6.5</p></blockquote><h4 id="Linux-的基本命令"><a href="#Linux-的基本命令" class="headerlink" title="Linux 的基本命令"></a>Linux 的基本命令</h4><p>Linux 的目录结构<br><img src="/2018/04/09/Linux学习记录/linux_1.png" alt="Linux"></p><p>1.目录切换命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> usr<span class="comment"># 切换到 usr 目录</span></span><br><span class="line"><span class="built_in">cd</span> ../<span class="comment"># 切换到上一层目录</span></span><br><span class="line"><span class="built_in">cd</span> /<span class="comment"># 切换到系统根目录</span></span><br><span class="line"><span class="built_in">cd</span> ~<span class="comment"># 切换到用户主目录</span></span><br><span class="line"><span class="built_in">cd</span> -<span class="comment"># 切换到上一个所在目录</span></span><br></pre></td></tr></table></figure></p><p>2.目录的增删改查<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span><span class="comment"># 在当前目录创建一个 test 目录</span></span><br><span class="line">ls -al<span class="comment"># 查看当前目录下的目录及文件，使用 -a 表示包含隐藏的，使用 -l 表示包含详细信息</span></span><br><span class="line">find /root -name <span class="string">'test*'</span><span class="comment"># 查找/root下的与test相关的目录(文件)</span></span><br><span class="line"></span><br><span class="line">mv oldName newName<span class="comment"># 将名称为 oldName 的目录(或文件)重新命名为 newName</span></span><br><span class="line">mv newName /usr<span class="comment"># 将名称为 newName 的目录(或文件)移动到 /usr 目录下</span></span><br><span class="line">cp -r /user/newName /<span class="built_in">test</span><span class="comment"># 将 /usr 下的 newTest 拷贝到根目录下的 test 中，r 代表递归拷贝</span></span><br><span class="line"></span><br><span class="line">rm -rf newName<span class="comment"># 删除名为 newName 的目录(或文件)，使用 -r 会再次询问是否删除，使用 -rf 会直接删除</span></span><br></pre></td></tr></table></figure></p><p>3.文件的增删改查<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">touch test.txt<span class="comment"># 创建一个名为 test.txt 的文件</span></span><br><span class="line">cat /etc/sudo.conf<span class="comment"># 使用 cat 查看 /etc/sudo.conf 文件，只能显示最后一屏内容</span></span><br><span class="line">more /etc/sudo.conf<span class="comment"># 使用 more 查看 /etc/sudo.conf 文件，可以显示百分比，回车可以向下一行，空格可以向下一页，q 可以退出查看</span></span><br><span class="line"></span><br><span class="line">less /etc/sudo.conf<span class="comment"># 使用 less 查看 /etc/sudo.conf 文件，可以使用键盘上的 PgUp 和 PgDn 向上和 向下翻页，q 结束查看</span></span><br><span class="line">tail -10 /etc/sudo.conf<span class="comment"># 使用tail -10 查看 /etc/sudo.conf 文件的后 10 行，Ctrl+C 结束</span></span><br><span class="line">tail -f catalina-2017-11-11.log<span class="comment"># 动态监控日志文件的变化</span></span><br><span class="line"></span><br><span class="line">vim aaa.txt<span class="comment"># 使用 vim 编辑 aaa.txt 文件，进入之后并不能立即编辑，此时是命令行模式</span></span><br><span class="line"><span class="comment"># 点击键盘 i/a/o 进入编辑模式，编辑完后按下 Esc 返回命令行模式</span></span><br><span class="line"><span class="comment"># 最后输入 :(冒号) 进入底行模式，输入 wq 表示保存并退出，输入 q! 表示不保存退出</span></span><br></pre></td></tr></table></figure></p><p>4.文件的压缩<br>Linux 中的打包文件一般是以 .tar 结尾的，压缩的命令一般是以 .gz 结尾的，打包并压缩后的文件的后缀名为 .tar.gz<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf xxx.tar.gz aaa.txt bbb.txt ccc.txt<span class="comment"># 将 aaa、bbb、ccc 三个文件打包压缩</span></span><br><span class="line"><span class="comment"># z：调用gzip压缩命令进行压缩</span></span><br><span class="line"><span class="comment"># c：打包文件</span></span><br><span class="line"><span class="comment"># v：显示运行过程</span></span><br><span class="line"><span class="comment"># f：指定文件名</span></span><br><span class="line"></span><br><span class="line">tar -xvf xxx.tar.gz<span class="comment"># 将 xxx.tar.gz 解压到当前目录下</span></span><br><span class="line"><span class="comment"># x：代表解压</span></span><br><span class="line">tar -xvf xxx.tar.gz -C /usr<span class="comment"># 将 xxx.tar.gz 解压到根目录 /usr 下</span></span><br><span class="line"><span class="comment"># C：代表指定解压的位置</span></span><br></pre></td></tr></table></figure></p><p>5.其他命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">grep to /etc/sudo.conf<span class="comment"># 搜索 /etc/sudu.conf 文件中包含字符串 to 的行</span></span><br><span class="line">grep to /etc/sudo.conf --color<span class="comment"># 搜索 /etc/sudu.conf 文件中包含字符串 to 的行并高亮显示</span></span><br><span class="line"></span><br><span class="line">ps -ef | grep system<span class="comment"># 查看当前系统中所有的进程中包括 system 字符串的进程</span></span><br><span class="line"><span class="comment"># |: 管道命令，将前一个命令的输出作为本次目录的输入</span></span><br><span class="line"><span class="comment"># ps -ef：查看当前系统中运行的进程</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 进程的pid<span class="comment"># 杀死进程</span></span><br><span class="line">ifconfig<span class="comment"># 查看当前系统的网卡信息</span></span><br><span class="line">ping xxx<span class="comment"># 查看与某台机器的连接情况</span></span><br><span class="line"></span><br><span class="line">netstat -an<span class="comment"># 查看当前系统的端口使用</span></span><br></pre></td></tr></table></figure></p><p>6.Linux的权限命令<br><img src="/2018/04/09/Linux学习记录/linux_2.png" alt="Linux"><br>文件的类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d：代表目录</span><br><span class="line">-：代表文件</span><br><span class="line">l：代表链接（可以认为是window中的快捷方式）</span><br></pre></td></tr></table></figure></p><p>后面的 9 位分为 3 组，每 3 位置一组，分别代表属主的权限，与当前用户同组的用户的权限，其他用户的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r：代表权限是可读，r 也可以用数字 4 表示</span><br><span class="line">w：代表权限是可写，w 也可以用数字 2 表示</span><br><span class="line">x：代表权限是可执行，x 也可以用数字 1 表示</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u=rwx,g=rw,o=r aaa.txt<span class="comment"># aaa.txt 的权限为属主有全部权限，属主所在的组有读写权限，其他用户只有读的权限</span></span><br><span class="line">chmod 764 aaa.txt<span class="comment"># 可以使用数字表示</span></span><br></pre></td></tr></table></figure><h4 id="远程连接工具的使用"><a href="#远程连接工具的使用" class="headerlink" title="远程连接工具的使用"></a>远程连接工具的使用</h4><p>本文使用 <a href="https://cdn.netsarang.net/94655810/Xshell-5.0.1339p.exe" target="_blank" rel="noopener">Xshell</a> 进行连接 Linux 并操作它</p><p>关于远程工具乱码的解决</p><blockquote><p>尝试修改 linux 中的 /etc/sysconfig 目录下的 i18n 文件为 <code>LANG=&quot;zh_CN.GBK&quot;</code> 或 <code>LANG=&quot;zh_CN.UTF-8&quot;</code></p></blockquote><h4 id="用-rz、sz-命令在-Xshell-传输文件"><a href="#用-rz、sz-命令在-Xshell-传输文件" class="headerlink" title="用 rz、sz 命令在 Xshell 传输文件"></a>用 rz、sz 命令在 Xshell 传输文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install lrzsz -y<span class="comment"># 安装rz、sz</span></span><br><span class="line">rz<span class="comment"># 接收文件，Xshell 就会弹出文件选择对话框，选好文件之后关闭对话框，文件就会上传到 linux 里的当前目录</span></span><br><span class="line">sz file<span class="comment"># 发文件到 windows 上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：更简便的方法是直接拖动文件到 Xshell 里面，就可以完成上传</span></span><br></pre></td></tr></table></figure><h4 id="Linux-的软件安装"><a href="#Linux-的软件安装" class="headerlink" title="Linux 的软件安装"></a>Linux 的软件安装</h4><p>1.JDK安装</p><p>rpm 与软件相关命令 相当于 window 下的软件助手 管理软件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java<span class="comment"># 查看当前 Linux 系统是否已经安装 java</span></span><br><span class="line">rpm -e --nodeps 要卸载的软件<span class="comment"># 卸载指定的软件</span></span><br></pre></td></tr></table></figure></p><blockquote><p>① 上传 jdk 到 linux<br>② 安装 jdk 运行需要的插件 <code>yum install glibc.i686</code>（选做）<br>③ 解压 jdk 到 /usr/local 下 <code>tar –xvf jdk-7u71-linux-i586.tar.gz –C /usr/local</code><br>④ 配置 jdk 环境变量，打开 /etc/profile 配置文件，将下面配置拷贝进去<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set java environment</span></span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_71</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib.tools.jar</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>⑤ 重新加载 /etc/profil e配置文件 <code>source /etc/profile</code><br>⑥ 检验是否成功 <code>java -version</code>  </p></blockquote><p>2.Mysql 的安装</p><blockquote><p>① 查看 CentOS 自带的 MySql <code>rpm -qa | grep  mysql</code><br>② 将自带的 MySql 卸载 <code>rpm -e --nodeps mysql-libs-xxx</code><br>③ 上传 Mysql 到 Linux<br>④ 安装 Mysql 的依赖（选做）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libaio.so.1 libgcc_s.so.1 libstdc++.so.6</span><br><span class="line">yum  update libstdc++-4.4.7-4.el6.x86_64</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>⑤ 解压 Mysql 到 /usr/local/ 下的 mysql 目录( mysql 目录需要手动创建)内<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">mkdir mysql</span><br><span class="line">tar -xvf MySQL-5.6.22-1.el6.i686.rpm-bundle.tar -C /usr/<span class="built_in">local</span>/mysql</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>⑥ 在 /usr/local/mysql 下安装 mysql<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm<span class="comment"># 安装服务器端</span></span><br><span class="line">rpm -ivh MySQL-client-5.6.22-1.el6.i686.rpm<span class="comment"># 安装客户端</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>⑦ 启动 mysql <code>service mysql start</code><br>⑧ 将 mysql 加到系统服务中并设置开机启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add mysql<span class="comment"># 加入到系统服务</span></span><br><span class="line">chkconfig mysql on<span class="comment"># 自动启动</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>⑨ 登录 mysql，mysql 安装好后会生成一个临时随机密码，存储位置在 /root/.mysql_secret<br>⑩ 登录 mysql 后，修改 mysql 的密码，<code>set password = password(&#39;654321&#39;);</code><br>11 开启 mysql 的远程登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下 mysql 为安全起见，不支持远程登录 mysql，所以需要设置开启远程登录 mysql 的权限</span></span><br><span class="line"><span class="comment"># 登录mysql后输入如下命令：</span></span><br><span class="line">grant all privileges on *.* to <span class="string">'root'</span> @<span class="string">'%'</span> identified by <span class="string">'root'</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>12 开放 Linux 的对外访问的端口 3306<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT</span><br><span class="line">/etc/rc.d/init.d/iptables save <span class="comment"># 将修改永久保存到防火墙中</span></span><br></pre></td></tr></table></figure></p></blockquote><p>3.Tomcat 的安装</p><blockquote><p>① 上传 Tomcat 到 Linux<br>② 解压 Tomcat 到 /usr/local 下<br>③ 开放 Linux 的对外访问的端口 8080<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>④ 启动关闭 Tomcat<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入 tomcat 的 bin 下启动：./startup.sh</span><br><span class="line">进入 tomcat 的 bin 下关闭：./shutdown.sh</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      记录Linux的学习笔记
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="Linux" scheme="http://lingchenjie.club/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC的学习记录(二)</title>
    <link href="http://lingchenjie.club/2018/03/26/SpringMVC%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E4%BA%8C/"/>
    <id>http://lingchenjie.club/2018/03/26/SpringMVC的学习记录-二/</id>
    <published>2018-03-26T02:12:07.000Z</published>
    <updated>2018-03-27T06:19:18.117Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>本文是对第一篇文章的补充，没有看过第一篇的，建议先学习第一篇，本文案例github地址：<a href="https://github.com/LingChenJie/SpringMVCDmeo" target="_blank" rel="noopener">https://github.com/LingChenJie/SpringMVCDmeo</a></p><h4 id="绑定数组"><a href="#绑定数组" class="headerlink" title="绑定数组"></a>绑定数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①包装对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Integer[] ids;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②前端页面</span></span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" name="ids" value="111"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" name="ids" value="222"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" name="ids" value="333"/&gt;&lt;/td</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③控制器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryitem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItem</span><span class="params">(QueryVo vo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Arrays.toString(vo.getIds()));</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绑定表单数据到List"><a href="#绑定表单数据到List" class="headerlink" title="绑定表单数据到List"></a>绑定表单数据到List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①封装包装类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Items&gt; list;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②前端</span></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;list &#125;"</span> var=<span class="string">"item"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" name="ids" value="$&#123;item.id&#125;"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="list[$&#123;s.index&#125;].name" value="$&#123;item.name&#125;"&gt; &lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="list[$&#123;s.index&#125;].price" value="$&#123;item.price&#125;"&gt; &lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;fmt:formatDate value="$&#123;item.createtime&#125;" pattern="yyyy-MM-dd HH:mm:ss"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span>  value=<span class="string">"批量修改"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③控制器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryitem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItem</span><span class="params">(QueryVo vo)</span> </span>&#123;</span><br><span class="line">System.out.println(vo.getList());</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><blockquote><p>1.URL 路径映射<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// value 的值是数组，可以将多个 url 映射到同一个方法</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = &#123; <span class="string">"itemList"</span>, <span class="string">"itemListAll"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItemList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.添加在类上面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 class 上添加 @RequestMapping(url )指定通用请求前缀，限制此类下的所有方法请求 url 必须以请求前缀开头</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.请求方法限定<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限定 GET 方法</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限定 POST 方法</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET 和 POST 都可以</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(method = &#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Controller-方法返回值"><a href="#Controller-方法返回值" class="headerlink" title="Controller 方法返回值"></a>Controller 方法返回值</h4><blockquote><p>1.返回 ModelAndView<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">controller 方法中定义 ModelAndView 对象并返回，对象中可添加 model 数据、指定 view</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.返回 void<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Controller 方法形参上可以定义 request 和 response，使用 request 或 response 指定响应结果</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryitem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItem</span><span class="params">(Model model,HttpServletRequest request,HttpServletResponse response)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ① 使用 request 转发页面</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/success.jsp"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② 可以通过 response 页面重定向</span></span><br><span class="line">response.sendRedirect(<span class="string">"/springmvc/itemEdit.action"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③ 可以通过 response 指定响应结果，例如响应 json 数据</span></span><br><span class="line">response.getWriter().print(<span class="string">"&#123;\"name\":zhangsan&#125;"</span>);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.返回字符串</p></blockquote><blockquote><p>3.① 逻辑视图名<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定逻辑视图名，经过视图解析器解析为jsp物理路径：/WEB-INF/jsp/itemList.jsp</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"itemList"</span>;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.② Redirect 重定向<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"updateItem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateItemById</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/itemEdit.action?itemId="</span> + item.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.③ Forward 转发<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"updateItem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateItemById</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"forward:/itemEdit.action"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h4><p>SpringMVC 在处理请求过程中出现异常信息交由异常处理器进行处理，自定义异常处理器可以实现一个系统的异常处理逻辑</p><p>系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由 springmvc 前端控制器交由异常处理器进行异常处理，如下图<br><img src="/2018/03/26/SpringMVC的学习记录-二/springmvc_1.png" alt="SpringMVC"></p><blockquote><p>1.自定义异常类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.自定义异常处理器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         HttpServletResponse response, Object obj,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         Exception e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String msg;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断异常类型</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MyException) &#123;</span><br><span class="line">            <span class="comment">// 如果是自定义异常，读取异常信息</span></span><br><span class="line">            msg = e.getMessage();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是运行时异常，则取错误堆栈，从堆栈中获取异常信息</span></span><br><span class="line">            Writer out = <span class="keyword">new</span> StringWriter();</span><br><span class="line">            PrintWriter s = <span class="keyword">new</span> PrintWriter(out);</span><br><span class="line">            e.printStackTrace(s);</span><br><span class="line">            msg = out.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>, msg);</span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.异常处理器配置<br>在 springmvc.xml 中添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置全局异常处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"customerHandleException"</span> <span class="attr">class</span>=<span class="string">"com.jiechen.exception.CustomExceptionResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.错误页面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>系统发生异常了！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>异常信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>$&#123;msg &#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><blockquote><p>1.配置虚拟目录<br>在tomcat上配置图片虚拟目录，在tomcat下conf/server.xml中添加： <code>&lt;Context docBase=&quot;D:\develop\upload\temp&quot; path=&quot;/pic&quot; reloadable=&quot;false&quot;/&gt;</code>，访问<a href="http://localhost:8080/pic" target="_blank" rel="noopener">http://localhost:8080/pic</a> 即可访问 <code>D:\develop\upload\temp</code> 下的图片<br><img src="/2018/03/26/SpringMVC的学习记录-二/springmvc_2.png" alt="SpringMVC"></p></blockquote><blockquote><p>2.实现图片上传需要加入的 jar 包，如下图<br><img src="/2018/03/26/SpringMVC的学习记录-二/springmvc_3.png" alt="SpringMVC"></p></blockquote><blockquote><p>3.配置上传解析器<br>在 springmvc.xml 中配置文件上传解析器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传,id必须设置为multipartResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置文件上传大小  B   5M  1*1024*1024*5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5000000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.前端修改<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上传图片是需要指定属性 enctype="multipart/form-data" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"itemForm"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>  <span class="attr">name</span>=<span class="string">"pictureFile"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5.前端控制器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"updateitem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateItemById</span><span class="params">(Items item, MultipartFile pictureFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 图片上传</span></span><br><span class="line"><span class="comment">// 设置图片名称，不能重复，可以使用uuid</span></span><br><span class="line">String picName = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件名</span></span><br><span class="line">String oriName = pictureFile.getOriginalFilename();</span><br><span class="line"><span class="comment">// 获取图片后缀</span></span><br><span class="line">String extName = oriName.substring(oriName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始上传</span></span><br><span class="line">pictureFile.transferTo(<span class="keyword">new</span> File(<span class="string">"E:/java/temp/upload/"</span> + picName + extName));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置图片名到商品中</span></span><br><span class="line">item.setPic(picName + extName);</span><br><span class="line"><span class="comment">// ---------------------------------------------</span></span><br><span class="line"><span class="comment">// 更新商品</span></span><br><span class="line"><span class="keyword">this</span>.itemService.updateItemsById(item);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"forward:/itemEdit.action"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Json数据交互"><a href="#Json数据交互" class="headerlink" title="Json数据交互"></a>Json数据交互</h4><blockquote><p>@RequestBody<br>@RequestBody 注解用于读取 http 请求的内容(字符串)，通过 SpringMVC 提供的 HttpMessageConverter 接口将读到的内容（json 数据）转换为 java 对象并绑定到 Controller 方法的参数上</p></blockquote><blockquote><p>@ResponseBody<br>@ResponseBody 注解用于将 Controller 的方法返回的对象，通过 SpringMVC 提供的 HttpMessageConverter 接口转换为指定格式的数据如：json，xml等，通过 Response 响应给客户端</p></blockquote><blockquote><p>加入 jar<br>如果需要 SpringMVC 支持 Json，必须加入 Json 的处理 jar，我们使用 Jackson 这个 jar，如下<br><img src="/2018/03/26/SpringMVC的学习记录-二/springmvc_4.png" alt="SpringMVC"></p></blockquote><blockquote><p>Controller编写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"testJson"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Item <span class="title">testJson</span><span class="params">(@RequestBody Item item)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="RESTful支持"><a href="#RESTful支持" class="headerlink" title="RESTful支持"></a>RESTful支持</h4><p>Restful 就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">传统方式操作资源</span><br><span class="line">http://127.0.0.1/item/queryItem.action?id=1查询,GET</span><br><span class="line">http://127.0.0.1/item/saveItem.action新增,POST</span><br><span class="line">http://127.0.0.1/item/updateItem.action更新,POST</span><br><span class="line">http://127.0.0.1/item/deleteItem.action?id=1删除,GET或POST</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用RESTful操作资源</span><br><span class="line">http://127.0.0.1/item/1查询,GET</span><br><span class="line">http://127.0.0.1/item新增,POST</span><br><span class="line">http://127.0.0.1/item更新,PUT</span><br><span class="line">http://127.0.0.1/item/1删除,DELETE</span><br></pre></td></tr></table></figure><blockquote><p>使用RESTful风格开发的接口，根据 id 查询商品<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"item/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">queryItemById</span><span class="params">(@PathVariable()</span> Integer id) </span>&#123;</span><br><span class="line">Item item = <span class="keyword">this</span>.itemService.queryItemById(id);</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果@RequestMapping中表示为 "item/&#123;id&#125;"，id和形参名称一致，@PathVariable不用指定名称。</span></span><br><span class="line"><span class="comment">// 如果不一致，例如"item/&#123;ItemId&#125;"则需要指定名称@PathVariable("itemId")</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><blockquote><p>1.拦截器定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller 执行后且视图返回后调用此方法</span></span><br><span class="line"><span class="comment">// 这里可得到执行 Controller 时的异常信息，记录操作日志</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HandlerInterceptor1....afterCompletion"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller执行后但未返回视图前调用此方法</span></span><br><span class="line"><span class="comment">// 这里可在返回用户前对模型数据进行加工处理，比如这里加入公用信息以便页面显示</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HandlerInterceptor1....postHandle"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller执行前调用此方法</span></span><br><span class="line"><span class="comment">// 返回true表示继续执行，返回false中止执行</span></span><br><span class="line"><span class="comment">// 这里可以加入登录校验、权限拦截等</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"HandlerInterceptor1....preHandle"</span>);</span><br><span class="line"><span class="comment">// 设置为true，测试使用</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.在springmvc.xml中配置拦截器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 所有的请求都进入拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置具体的拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.jiechen.interceptor.HandlerInterceptor1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 所有的请求都进入拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置具体的拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.jiechen.interceptor.HandlerInterceptor2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.总结<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">preHandle按拦截器定义顺序调用</span><br><span class="line">postHandler按拦截器定义逆序调用</span><br><span class="line">afterCompletion按拦截器定义逆序调用</span><br><span class="line"></span><br><span class="line">postHandler在拦截器链内所有拦截器返成功调用</span><br><span class="line">afterCompletion只有preHandle返回true才调用</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="拦截器应用"><a href="#拦截器应用" class="headerlink" title="拦截器应用"></a>拦截器应用</h4><blockquote><p>验证用户是否登录</p></blockquote><blockquote><p>1.用户登陆Controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"toLogin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, HttpSession session)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 校验用户登录</span></span><br><span class="line">System.out.println(username);</span><br><span class="line">System.out.println(password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把用户名放到session中</span></span><br><span class="line">session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"redirect:/item/itemList.action"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.编写拦截器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object arg2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">Object username = session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果不为空则放行</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果为空则跳转到登录页面</span></span><br><span class="line">response.sendRedirect(request.getContextPath() + <span class="string">"/user/toLogin.action"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.配置拦截器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置商品被拦截器拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/item/**"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置具体的拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.jiechen.interceptor.LoginHandlerInterceptor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      记录SpringMVC的学习笔记
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://lingchenjie.club/tags/java/"/>
    
      <category term="web框架" scheme="http://lingchenjie.club/tags/web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="http://lingchenjie.club/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC的学习记录(一)</title>
    <link href="http://lingchenjie.club/2018/03/24/SpringMVC%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/03/24/SpringMVC的学习记录/</id>
    <published>2018-03-24T08:05:36.000Z</published>
    <updated>2018-03-27T06:21:24.373Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>SpringMVC 和 Struts2 都属于表现层的框架，SpringMVC 是 Spring 框架的一部分，Spring 相关 jar 包下载地址：<a href="http://repo.springsource.org/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">http://repo.springsource.org/libs-release-local/org/springframework/spring/</a> ，本文案例github地址：<a href="https://github.com/LingChenJie/SpringMVCDmeo" target="_blank" rel="noopener">https://github.com/LingChenJie/SpringMVCDmeo</a></p><h4 id="SpringMVC处理流程"><a href="#SpringMVC处理流程" class="headerlink" title="SpringMVC处理流程"></a>SpringMVC处理流程</h4><blockquote><p><img src="/2018/03/24/SpringMVC的学习记录/springmvc_1.png" alt="SpringMVC"></p></blockquote><h4 id="Spring入门案例"><a href="#Spring入门案例" class="headerlink" title="Spring入门案例"></a>Spring入门案例</h4><blockquote><p>1.加入相关 jar ，如下<br><img src="/2018/03/24/SpringMVC的学习记录/springmvc_3.png" alt="SpringMVC"></p></blockquote><blockquote><p>2.创建 springmvc.xml<br>springmvc.xml 是 SpringMVC 的核心配置文件，进行如下配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置controller扫描包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.jiechen.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.在 web.xml 中配置前端控制器<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定SpringMVC配置文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringMVC的配置文件的默认路径是/WEB-INF/$&#123;servlet-name&#125;-servlet.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置所有以action结尾的请求进入SpringMVC --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.加入 itemList.jsp 页面，页面内容如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">border</span>=<span class="string">1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>商品名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>商品价格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>生产日期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>商品描述<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list &#125;"</span> <span class="attr">var</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;item.name &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;item.price &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">fmt:formatDate</span> <span class="attr">value</span>=<span class="string">"$&#123;item.createtime&#125;"</span> <span class="attr">pattern</span>=<span class="string">"yyyy-MM-dd HH:mm:ss"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;item.detail &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/itemEdit.action?id=$&#123;item.id&#125;"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5.创建商品 pojo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Date createtime;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/get</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>6.创建 ItemController<br>在类上添加 @Controller 注解，把 Controller 交由 Spring 管理，在方法上面添加 @RequestMapping 注解，里面指定请求的url<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @RequestMapping：里面放的是请求的url，和用户请求的url进行匹配</span></span><br><span class="line">    <span class="comment">// action可以写也可以不写</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/itemList.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItemList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建页面需要显示的商品数据</span></span><br><span class="line">        List&lt;Item&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Item(<span class="number">1</span>, <span class="string">"1华为 荣耀9"</span>, <span class="number">2399</span>, <span class="keyword">new</span> Date(), <span class="string">"质量好！1"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Item(<span class="number">2</span>, <span class="string">"2华为 荣耀9"</span>, <span class="number">2399</span>, <span class="keyword">new</span> Date(), <span class="string">"质量好！2"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Item(<span class="number">3</span>, <span class="string">"3华为 荣耀9"</span>, <span class="number">2399</span>, <span class="keyword">new</span> Date(), <span class="string">"质量好！3"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Item(<span class="number">4</span>, <span class="string">"4华为 荣耀9"</span>, <span class="number">2399</span>, <span class="keyword">new</span> Date(), <span class="string">"质量好！4"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Item(<span class="number">5</span>, <span class="string">"5华为 荣耀9"</span>, <span class="number">2399</span>, <span class="keyword">new</span> Date(), <span class="string">"质量好！5"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Item(<span class="number">6</span>, <span class="string">"6华为 荣耀9"</span>, <span class="number">2399</span>, <span class="keyword">new</span> Date(), <span class="string">"质量好！6"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ModelAndView，用来存放数据和视图</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">// 设置数据到模型中</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="comment">// 设置视图jsp，需要设置视图的物理地址</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"/WEB-INF/jsp/itemList.jsp"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>7.启动项目，在浏览器访问：<a href="http://localhost:8080/springmvc/itemList.action" target="_blank" rel="noopener">http://localhost:8080/springmvc/itemList.action</a> 得到下图<br><img src="/2018/03/24/SpringMVC的学习记录/springmvc_4.png" alt="SpringMVC"></p></blockquote><p>通过上面的小案例，我们可以感受到 SpringMVC 魅力，为什么可以这样，接着我们分析下 springMVC 的架构图</p><h4 id="SpringMVC架构"><a href="#SpringMVC架构" class="headerlink" title="SpringMVC架构"></a>SpringMVC架构</h4><blockquote><p>1.springMVC 架构图<br><img src="/2018/03/24/SpringMVC的学习记录/springmvc_2.png" alt="SpringMVC"></p></blockquote><blockquote><p>2.架构流程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">① 用户发送请求至前端控制器 DispatcherServlet</span><br><span class="line">② DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器</span><br><span class="line">③ 处理器映射器根据请求 url 找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给 DispatcherServlet</span><br><span class="line"></span><br><span class="line">④ DispatcherServlet 通过 HandlerAdapter 处理器适配器调用处理器 Handler</span><br><span class="line">⑤ 执行处理器(Controller，也叫后端控制器)</span><br><span class="line">⑥ Controller 执行完成返回 ModelAndView</span><br><span class="line"></span><br><span class="line">⑦ HandlerAdapter 将 Controller 执行结果 ModelAndView 返回给 DispatcherServlet</span><br><span class="line">⑧ DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器</span><br><span class="line">⑨ ViewReslover 解析后返回具体的 View</span><br><span class="line"></span><br><span class="line">⑩ DispatcherServlet 对 View 进行渲染视图（即将模型数据填充至视图中）</span><br><span class="line">最后 DispatcherServlet 响应用户</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="组件扫描器"><a href="#组件扫描器" class="headerlink" title="组件扫描器"></a>组件扫描器</h4><blockquote><p>组件扫描器省去在 spring 容器配置每个 Controller 类的繁琐，使用 <code>&lt;context:component-scan&gt;</code> 自动扫描标记 @Controller 的控制器类，在 springmvc.xml 的配置如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置controller扫描包，多个包之间用,分隔 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.jiechen.controller"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="注解器和适配器"><a href="#注解器和适配器" class="headerlink" title="注解器和适配器"></a>注解器和适配器</h4><blockquote><p>1.注解式处理器映射器，对类中标记了 @ResquestMapping 的方法进行映射。<br>根据 @ResquestMapping 定义的 url 匹配 @ResquestMapping 标记的方法，匹配成功返回 HandlerMethod 对象给前端控制器。HandlerMethod 对象中封装 url 对应的方法 Method<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 在 springmvc.xml 配置文件中配置如下</span><br><span class="line"><span class="comment">&lt;!-- 配置处理器映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.注解式处理器适配器，对标记 @ResquestMapping 的方法进行适配<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 在 springmvc.xml 配置文件中配置如下</span><br><span class="line"><span class="comment">&lt;!-- 配置处理器适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.注解驱动<br>SpringMVC 可以使用 <code>&lt;mvc:annotation-driven&gt;</code> 自动加载 RequestMappingHandlerMapping 和 RequestMappingHandlerAdapter<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 在 springmvc.xml 配置文件中配置如下</span><br><span class="line"><span class="comment">&lt;!-- 注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h4><blockquote><p>视图解析器使用 SpringMVC 框架默认的 InternalResourceViewResolver ，这个视图解析器支持 JSP 视图解析<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 1.在 springmvc.xml 配置文件中配置如下</span><br><span class="line"><span class="comment">&lt;!-- 比如 prefix="/WEB-INF/jsp/", suffix=".jsp", viewName="test"( 逻辑视图名需要在 </span></span><br><span class="line"><span class="comment">Controller 中返回 ModelAndView 指定, 比如test ), 返回的 jsp 的视图是："/WEB-INF/jsp/test.jsp" --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置逻辑视图的前缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置逻辑视图的后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 2.修改ItemController，其效果和之前一样</span><br><span class="line">// 配置好视图解析器前缀和后缀，这里只需要设置逻辑视图就可以了</span><br><span class="line">modelAndView.setViewName("itemList");</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="SpringMVC整合Mybatis"><a href="#SpringMVC整合Mybatis" class="headerlink" title="SpringMVC整合Mybatis"></a>SpringMVC整合Mybatis</h4><blockquote><p>1.创建数据库表，准备数据，表结构如下<br><img src="/2018/03/24/SpringMVC的学习记录/springmvc_5.png" alt="SpringMVC"></p></blockquote><blockquote><p>2.加入 jar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">① spring ( 包括 springMVC )</span><br><span class="line">② mybaits</span><br><span class="line">③ mybatis-spring 整合包</span><br><span class="line">④ 数据库驱动</span><br><span class="line">⑤ 第三方连接池</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.加入配置文件</p></blockquote><blockquote><p>3.① Mybatis 的核心配置文件 sqlMapConfig.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定扫描包，会把包内所有的类都设置别名，别名的名称就是类名，大小写不敏感 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.jiechen.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.② 连接数据库配置信息 db.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/springmvc?characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=654321</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.③ Spring 核心配置文件 applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis的工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 核心配置文件的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:sqlMapConfig.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mapper动态代理开发  扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.jiechen.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注解事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.④ SpringMVC 配置文件 springmvc.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置controller扫描包，多个包之间用,分隔 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.jiechen.controller,com.jiechen.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 处理器注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置逻辑视图的前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置逻辑视图的后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.⑤ web.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC前端控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.ItemController 的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示商品信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/itemlist"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItemList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Items&gt; list = itemService.selectItemsList();</span><br><span class="line"></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mv.addObject(<span class="string">"list"</span>, list);</span><br><span class="line">        mv.setViewName(<span class="string">"itemList"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Service 和 Dao 的实现这里就不贴出了，具体可以查看源码</p></blockquote><blockquote><p>5.最后，我们访问 <a href="http://localhost:8080/springmvc/itemlist.action" target="_blank" rel="noopener">http://localhost:8080/springmvc/itemlist.action</a> 就可以成功的显示数据库中存储的数据了</p></blockquote><h4 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h4><blockquote><p>1.处理器形参中添加如下类型的参数处理适配器会默认识别并进行赋值<br>        HttpServletRequest、HttpServletResponse、HttpSession<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/itemEdit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItemList2</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String strId = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">Integer id = Integer.valueOf(strId);</span><br><span class="line"></span><br><span class="line">Items items = itemService.queryItemsById(id);</span><br><span class="line"></span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.addObject(<span class="string">"item"</span>, items);</span><br><span class="line">mv.setViewName(<span class="string">"itemEdit"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.Model/ModelMap<br>除了 ModelAndView 以外，还可以使用 Model 来向页面传递数据，Model 是一个接口，在参数里直接声明 Model 即可，View 对象则可以使用 String 返回值替代<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/itemEdit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItemList2</span><span class="params">(HttpServletRequest request, Model model)</span> </span>&#123;</span><br><span class="line">String strId = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">Integer id = Integer.valueOf(strId);</span><br><span class="line"></span><br><span class="line">Items items = itemService.queryItemsById(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ModelAndView mv = new ModelAndView();</span></span><br><span class="line"><span class="comment">// mv.addObject("item", items);</span></span><br><span class="line"><span class="comment">// mv.setViewName("itemEdit");</span></span><br><span class="line"><span class="comment">// return mv;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 model 代替 modelAndView</span></span><br><span class="line">model.addAttribute(<span class="string">"item"</span>, items);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"itemEdit"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.ModelMap<br>ModelMap 是 Model 接口的实现类，使用 Model 和 ModelMap 的效果一样<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/itemEdit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItemList2</span><span class="params">(HttpServletRequest request, ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">String strId = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">Integer id = Integer.valueOf(strId);</span><br><span class="line"></span><br><span class="line">Items items = itemService.queryItemsById(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 modelMap 代替 model</span></span><br><span class="line">modelMap.addAttribute(<span class="string">"item"</span>, items);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"itemEdit"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.请求参数与形参的绑定<br>当请求的参数名称和处理器形参名称一致时，会将请求参数与形参进行绑定<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/itemEdit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItemList2</span><span class="params">(Integer id, ModelMap model)</span> </span>&#123;</span><br><span class="line"><span class="comment">// String strId = request.getParameter("id");</span></span><br><span class="line"><span class="comment">// Integer id = Integer.valueOf(strId);</span></span><br><span class="line"></span><br><span class="line">Items items = itemService.queryItemsById(id);</span><br><span class="line"></span><br><span class="line">model.addAttribute(<span class="string">"item"</span>, items);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"itemEdit"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注：支持的数据类型：Integer、String、Float、Double、Boolean</p></blockquote><blockquote><p>5.RequestParam<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * value： 参数名字，即入参的请求参数名字，如value=“itemId” 表示请求的参数中的名字为 itemId 的参数的值将传入</span></span><br><span class="line"><span class="comment"> * required：是否必须，默认是true，表示请求中一定要有相应的参数，否则将报错</span></span><br><span class="line"><span class="comment"> * defaultValue：默认值，表示如果请求中没有同名参数时的默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/itemEdit"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItemList3</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>,required = <span class="keyword">true</span>, defaultValue = <span class="string">"1"</span>)</span> Integer id, ModelMap model) </span>&#123;</span><br><span class="line">Items items = itemService.queryItemsById(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 model 代替 modelAndView</span></span><br><span class="line">model.addAttribute(<span class="string">"item"</span>, items);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"itemEdit"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>6.绑定 pojo 类型<br>6.①.使用pojo接收表单数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pojo对象中的属性名和表单中input的name属性一致</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新商品，绑定pojo类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/updateitem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateItem</span><span class="params">(Items items)</span> </span>&#123;</span><br><span class="line">System.out.println(items.toString());</span><br><span class="line">itemService.updateItemsById(items);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>6.②包装对象<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Items item;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryitem"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">queryItem</span><span class="params">(QueryVo vo)</span> </span>&#123;</span><br><span class="line">System.out.println(vo.getItem().getId());</span><br><span class="line">System.out.println(vo.getItem().getName());</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsp页面</span></span><br><span class="line">&lt;td&gt;商品id&lt;input type="text" name="item.id"&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;商品名称&lt;input type="text" name="item.name"&gt;&lt;/td&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>6.③自定义参数绑定<br>springMVC 没办法把字符串转换成日期类型，所以需要自定义参数绑定<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①自定义Converter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span> != source)&#123;<span class="comment">//2016:11-05 11_43-50</span></span><br><span class="line">                DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy:MM-dd HH_mm-ss"</span>);</span><br><span class="line">                <span class="keyword">return</span> df.parse(source);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ②配置Converter，在 springmvc.xml中添加</span></span><br><span class="line">&lt;!-- 注解驱动 --&gt;</span><br><span class="line">&lt;mvc:annotation-driven conversion-service=<span class="string">"conversionServiceFactoryBean"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置Conveter转换器  转换工厂 （日期、去掉前后空格） --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"conversionServiceFactoryBean"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span><br><span class="line">&lt;!-- 配置 多个转换器--&gt;</span><br><span class="line">&lt;property name=<span class="string">"converters"</span>&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.jiechen.conversion.DateConverter"</span>/&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Post提交乱码问题"><a href="#Post提交乱码问题" class="headerlink" title="Post提交乱码问题"></a>Post提交乱码问题</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在web.xml中加入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置编码参是UTF8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 对于 get 请求中文参数出现乱码解决方法有两个</span><br><span class="line">// 1.修改 tomcat 配置文件添加编码与工程编码一致，如下</span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">"utf-8"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">// 2.对参数进行重新编码，ISO8859-1 是 tomcat 默认编码，需要将 tomcat 编码后的内容按 utf-8 编码</span><br><span class="line">String userName = new String(request.getParamter("userName").getBytes("ISO8859-1"),"utf-8")</span><br></pre></td></tr></table></figure><h4 id="SpringMVC与Struts2不同"><a href="#SpringMVC与Struts2不同" class="headerlink" title="SpringMVC与Struts2不同"></a>SpringMVC与Struts2不同</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">① SpringMVC 的入口是一个 Servlet 即前端控制器，而 Struts2 入口是一个 Filter 过滤器</span><br><span class="line"></span><br><span class="line">② SpringMVC 是基于方法开发(一个 url 对应一个方法)，请求参数传递到方法的形参，</span><br><span class="line">可以设计为单例或多例(建议单例)，Struts2 是基于类开发，传递参数是通过类的属性，只能设计为多例</span><br><span class="line"></span><br><span class="line">③ Struts2 采用值栈存储请求和响应的数据，通过 OGNL 存取数据， SpringMVC 通过参数解析器是</span><br><span class="line">将 request 请求内容解析，并给方法形参赋值，将数据和视图封装成 ModelAndView 对象，</span><br><span class="line">最后又将 ModelAndView 中的模型数据通过 request 域传输到页面，Jsp视图解析器默认使用jstl</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      记录SpringMVC的学习笔记
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://lingchenjie.club/tags/java/"/>
    
      <category term="web框架" scheme="http://lingchenjie.club/tags/web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="SpringMVC" scheme="http://lingchenjie.club/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Maven的学习记录</title>
    <link href="http://lingchenjie.club/2018/03/22/Maven%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/03/22/Maven的学习记录/</id>
    <published>2018-03-22T08:06:52.000Z</published>
    <updated>2018-03-23T08:50:46.910Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>Maven 是用来管理 java 项目的，对 jar 包的统一管理，可以节省项目工作空间，本文案例的 github 地址：<a href="https://github.com/LingChenJie/mavenssh" target="_blank" rel="noopener">https://github.com/LingChenJie/mavenssh</a></p><p>Maven 的下载地址：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a> ，下载后解压，配置环境变量，<code>MAVEN_HOME</code> = <code>E:\work\apache-maven-3.3.9</code>，之后需要把 <code>MAVEN_HOME</code> 加入到 <code>Path</code> 中，在 <code>doc</code> 窗口输入 <code>mvn -v</code> 验证是否成功</p><h4 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h4><blockquote><p>Mavne 仓库分三种：本地仓库( 自己维护 )，远程仓库( 私服，公司维护 )，中央仓库( maven 团队维护 )，maven 会优先使用本地仓库，当本地仓库不存在时，会从远程仓库或中央仓库下载相关资源，加入到本地仓库中</p></blockquote><blockquote><p>本地仓库的保存路径在 setting.xml 中修改，如下是我的 maven 仓库保存了路径<br><img src="/2018/03/22/Maven的学习记录/maven_1.png" alt="Maven"></p></blockquote><h4 id="Maven项目创建"><a href="#Maven项目创建" class="headerlink" title="Maven项目创建"></a>Maven项目创建</h4><blockquote><p>使用 idea 创建主要步骤如下：</p></blockquote><blockquote><p>1.选择使用 maven 创建项目<br><img src="/2018/03/22/Maven的学习记录/maven_2.png" alt="Maven"></p></blockquote><blockquote><p>2.输入公司名等<br><img src="/2018/03/22/Maven的学习记录/maven_3.png" alt="Maven"></p></blockquote><blockquote><p>3.选择 maven 地址<br><img src="/2018/03/22/Maven的学习记录/maven_4.png" alt="Maven"></p></blockquote><blockquote><p>4.创建成功之后，新建 java 资源目录，和项目资源运行输出目录 target. ( java目录创建后，<code>选中右键 -&gt; Mark Directory as -&gt; Source Root</code> ，转为资源目录)<br><img src="/2018/03/22/Maven的学习记录/maven_5.png" alt="Maven"></p></blockquote><blockquote><p>5.配置 Facets<br><img src="/2018/03/22/Maven的学习记录/maven_6.png" alt="Maven"></p></blockquote><blockquote><p>6.配置 Artifacts<br><img src="/2018/03/22/Maven的学习记录/maven_7.png" alt="Maven"></p></blockquote><h4 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h4><blockquote><p>下面的命令需要定位到项目目录下执行<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mvn clean # 清理编译的文件</span><br><span class="line"></span><br><span class="line">mvn compile # 编译主目录的文件</span><br><span class="line"></span><br><span class="line">mvn test # 编译并运行 test 目录的文件</span><br><span class="line"></span><br><span class="line">mvn package # 打包</span><br><span class="line"></span><br><span class="line">mvn install # 把项目发布到本地仓库</span><br><span class="line"></span><br><span class="line">mvn deploy # 发布到私服</span><br><span class="line"></span><br><span class="line">mvn tomcat:run # 启动项目</span><br><span class="line"></span><br><span class="line">mvn tomcat7:run # 如果使用的是 tomcat7 ，启动项目需要这样</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Maven编译版本配置"><a href="#Maven编译版本配置" class="headerlink" title="Maven编译版本配置"></a>Maven编译版本配置</h4><blockquote><p>项目中 maven 的核心文件是 pom.xml ，加入以下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span> </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven-ssh<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置编译版本为1.7 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- maven内置 的tomcat6插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 可以灵活配置工程路径 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/maven_demo<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 可以灵活配置端口号 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="如何添加依赖"><a href="#如何添加依赖" class="headerlink" title="如何添加依赖"></a>如何添加依赖</h4><blockquote><p>比如说我们的项目依赖 test 和 Servlet 相关 jar 包，在 pom.xml 加入以下代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这时相关 jar 并没有拉取到项目中，我们需要手动同步，右键项目，选择 maven ，如下<br><img src="/2018/03/22/Maven的学习记录/maven_8.png" alt="Maven"></p></blockquote><h4 id="依赖范围-scope"><a href="#依赖范围-scope" class="headerlink" title="依赖范围 ( scope )"></a>依赖范围 ( scope )</h4><blockquote><p><code>&lt;scope&gt;provided&lt;/scope&gt;</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">compile：表示编译时需要，测试时需要，运行时需要，打包时需要</span><br><span class="line"></span><br><span class="line">provided：编译时需要，测试时也需要，运行时不需要，打包时不需要</span><br><span class="line">比如：servlet，因为 tomcat 中内置了 servlet</span><br><span class="line"></span><br><span class="line">runtime：编译时不需要，测试时需要，运行时需要，打包时需要</span><br><span class="line">比如：数据库驱动包</span><br><span class="line"></span><br><span class="line">test：编译时不需要，测试时需要，运行时不需要，打包也不需要</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Maven解决依赖版本冲突的原则"><a href="#Maven解决依赖版本冲突的原则" class="headerlink" title="Maven解决依赖版本冲突的原则"></a>Maven解决依赖版本冲突的原则</h4><blockquote><p>1.第一声明优先原则<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如下两个 spring 依赖，maven 会依赖 spring-beans-4.2.4 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring-beans-4.2.4 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring-beans-3.0.5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-spring-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.路径近者优先原则，比如说同时本地有 jar ，远程也有依赖的情况，会优先使用本地的 jar</p></blockquote><blockquote><p>3.排除原则<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.struts<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>struts2-spring-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不包括 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.版本锁定原则<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提前指定版本号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate.version</span>&gt;</span>5.0.7.Final<span class="tag">&lt;/<span class="name">hibernate.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts.version</span>&gt;</span>2.3.24<span class="tag">&lt;/<span class="name">struts.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 锁定版本，struts2-2.3.24、spring4.2.4、hibernate5.0.7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Maven分模块开发"><a href="#Maven分模块开发" class="headerlink" title="Maven分模块开发"></a>Maven分模块开发</h4><blockquote><p>首先创建父模块，在父模块的基础上创建子模块，父模块把需要的资源包进行依赖，这样子模块在开发的时候就不需要再次依赖，案例地址： <a href="https://github.com/LingChenJie/maven_ssh_parent" target="_blank" rel="noopener">https://github.com/LingChenJie/maven_ssh_parent</a></p></blockquote><h4 id="私服-Nexus-搭建"><a href="#私服-Nexus-搭建" class="headerlink" title="私服 Nexus 搭建"></a>私服 Nexus 搭建</h4><blockquote><p>1.如何安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①下载地址：https://www.sonatype.com/download-nexus-repository-trial</span><br><span class="line"></span><br><span class="line">②下载后解压，进入 bin 目录，使用 doc 命令并定位到当前目录下</span><br><span class="line"></span><br><span class="line">③在命令行中输入 nexux.bat install 进行安装，安装完成之后，再次输入 nexus.bat start 启动服务</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.登录 nexus<br>在浏览器输入：<a href="http://localhost:8081/nexus/" target="_blank" rel="noopener">http://localhost:8081/nexus/</a> ，默认的用户名/密码：admin/admin123<br><img src="/2018/03/22/Maven的学习记录/nexus_1.png" alt="Maven"></p></blockquote><h4 id="上传项目到私服"><a href="#上传项目到私服" class="headerlink" title="上传项目到私服"></a>上传项目到私服</h4><blockquote><p>1.配置 maven 环境<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改 maven 中的 setting 文件，配置连接私服的用户和密码 --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.配置项目 pom.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project&gt;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &lt;distributionManagement&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">            &lt;url&gt;http://localhost:8081/nexus/content/repositories/releases/&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">        &lt;snapshotRepository&gt;</span><br><span class="line">            &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class="line">            &lt;url&gt;http://localhost:8081/nexus/content/repositories/snapshots/&lt;/url&gt;</span><br><span class="line">        &lt;/snapshotRepository&gt;</span><br><span class="line">    &lt;/distributionManagement&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.执行 <code>mvn deploy</code> 命令发布到私服中</p></blockquote><h4 id="从私服上下载依赖的module"><a href="#从私服上下载依赖的module" class="headerlink" title="从私服上下载依赖的module"></a>从私服上下载依赖的module</h4><blockquote><p>1.修改 maven 中的 setting 文件，如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!--profile的id--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--仓库id，repositories可以配置多个仓库，保证id不重复--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--仓库地址，即nexus仓库组的地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--是否下载releases构件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">releases</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">releases</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--是否下载snapshots构件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 插件仓库，maven的运行依赖插件，也需要从私服下载插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 插件仓库的id不允许重复，如果重复后边配置会覆盖前边 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.登录 <a href="http://localhost:8081/nexus/" target="_blank" rel="noopener">http://localhost:8081/nexus/</a> ，查看依赖配置<br><img src="/2018/03/22/Maven的学习记录/nexus_2.png" alt="Maven"></p></blockquote><blockquote><p>3.添加到项目的 pom.xml 中，进行依赖即可</p></blockquote>]]></content>
    
    <summary type="html">
    
      记录maven的学习笔记
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://lingchenjie.club/tags/java/"/>
    
      <category term="web框架" scheme="http://lingchenjie.club/tags/web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="maven" scheme="http://lingchenjie.club/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>spring和其它框架的整合</title>
    <link href="http://lingchenjie.club/2018/03/21/spring%E5%92%8C%E5%85%B6%E5%AE%83%E6%A1%86%E6%9E%B6%E7%9A%84%E6%95%B4%E5%90%88/"/>
    <id>http://lingchenjie.club/2018/03/21/spring和其它框架的整合/</id>
    <published>2018-03-21T10:15:35.000Z</published>
    <updated>2018-03-21T16:03:05.786Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>本文记录了 Spring 与 Struts2, Hibernate, Mybaits 的整合</p><h4 id="单独配置-Spring"><a href="#单独配置-Spring" class="headerlink" title="单独配置 Spring"></a>单独配置 Spring</h4><blockquote><p>1.在 src 下创建 applicationContext.xml，并导入约束<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.配置 spring 随项目启动<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 web.xml 中加入 --&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 让spring随web启动而创建的监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring配置文件位置参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring与Strus2的整合"><a href="#Spring与Strus2的整合" class="headerlink" title="Spring与Strus2的整合"></a>Spring与Strus2的整合</h4><blockquote><p>整合原理：action 的创建与组装由 spring 负责</p></blockquote><blockquote><p>1.导包<br>        struts2-spring-plugin-2.3.24.jar (位于 struts2 的lib中)</p></blockquote><blockquote><p>2.配置常量<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 struts.xml 中添加 --&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">struts.objectFactory = spring将action的创建交给spring容器</span></span><br><span class="line"><span class="comment">struts.objectFactory.spring.autoWire = name spring负责装配Action依赖属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objectFactory"</span> <span class="attr">value</span>=<span class="string">"spring"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.spring 负责创建 action 以及组装<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 applicationContext.xml 中完成 action 的组建，如下 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意:Action对象作用范围一定是多例的.这样才符合struts2架构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.web.action.UserAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"us"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 struts.xml 中使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"UserAction_*"</span> <span class="attr">class</span>=<span class="string">"userAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring与hibernate的整合"><a href="#Spring与hibernate的整合" class="headerlink" title="Spring与hibernate的整合"></a>Spring与hibernate的整合</h4><blockquote><p>整合原理：将 sessionFactory 对象交给 spring 容器管理</p></blockquote><blockquote><p>1.在 src 下创建 db.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.jdbcUrl=jdbc:mysql:///my_db</span><br><span class="line">jdbc.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.user=root</span><br><span class="line">jdbc.password=654321</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.在 applicationContext.xml 中配置连接池<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 读取db.properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置c3p0连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.将 SessionFactory 配置到 spring 容器中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将SessionFactory配置到spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将连接池注入到sessionFactory, hibernate会通过连接池获得连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置hibernate基本信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入orm元数据,指定orm元数据所在的包路径,spring会自动读取包中的所有配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingDirectoryLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/paxsz/bean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.配置事务管理<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 核心事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置事务通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"persist*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"modify*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"remove*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置将通知织入目标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切点 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.paxsz.service.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 向 dao 中注入 sessionFactory ，XXXDaoImpl 继承于 HibernateDaoSupport --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5.扩大session作用范围<br>为了避免使用懒加载时出现 no-session 问题，需要扩大session的作用范围<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 web.xml 中加入 --&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扩大session作用范围</span></span><br><span class="line"><span class="comment">         注意: 任何filter一定要在struts的filter之前调用</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>openSessionInView<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring与Mybatis的整合"><a href="#Spring与Mybatis的整合" class="headerlink" title="Spring与Mybatis的整合"></a>Spring与Mybatis的整合</h4><blockquote><p>整合原理：将 SqlSessionFactory 对象交给 spring 容器管理</p></blockquote><blockquote><p>1.导包<br>       mybatis-spring-1.2.2.jar</p></blockquote><blockquote><p>2.SqlMapConfig.xml 的配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定扫描包，会把包内所有的类都设置别名，别名的名称就是类名，大小写不敏感 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.paxsz.pojo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.在 spring 中配置 SqlSessionFactory<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 applicationContext.xml 中添加 --&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.省略 dataSource，见上面 --&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 2.配置SqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mybatis核心配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:SqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.配置 mapper 代理<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 applicationContext 中添加 --&gt;</span></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 两种方式配置 mapper 代理 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ① 单独配置 Mapper 代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userMapper"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 Mapper 接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperInterface"</span> <span class="attr">value</span>=<span class="string">"cn.itcast.mybatis.mapper.UserMapper"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ② 扫描包方式配置代理，每个 mapper 代理对象的 id 就是类名，首字母小写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 Mapper 接口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.itcast.mybatis.mapper"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      记录spring基本知识点
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://lingchenjie.club/tags/java/"/>
    
      <category term="web框架" scheme="http://lingchenjie.club/tags/web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="spring" scheme="http://lingchenjie.club/tags/spring/"/>
    
      <category term="Struts2" scheme="http://lingchenjie.club/tags/Struts2/"/>
    
      <category term="Hibernate" scheme="http://lingchenjie.club/tags/Hibernate/"/>
    
      <category term="Mybaits" scheme="http://lingchenjie.club/tags/Mybaits/"/>
    
  </entry>
  
  <entry>
    <title>spring的学习记录</title>
    <link href="http://lingchenjie.club/2018/03/19/spring%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/03/19/spring的学习记录/</id>
    <published>2018-03-19T08:42:30.000Z</published>
    <updated>2018-03-20T09:30:48.712Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>Spring 就是一个大工厂，可以管理所有对象的创建和维护对象之间的依赖关系，提供面向切面编程，可以很方便的实现对程序的权限拦截.</p><p>Spring 相关 jar 包下载地址：<a href="http://repo.springsource.org/libs-release-local/org/springframework/spring/" target="_blank" rel="noopener">http://repo.springsource.org/libs-release-local/org/springframework/spring/</a> ，本文案例的 github 地址：<a href="https://github.com/LingChenJie/spring-demo" target="_blank" rel="noopener">https://github.com/LingChenJie/spring-demo</a></p><h4 id="spring入门"><a href="#spring入门" class="headerlink" title="spring入门"></a>spring入门</h4><blockquote><p>1.导包<br><img src="/2018/03/19/spring的学习记录/spring_1.png" alt="spring"></p></blockquote><blockquote><p>2.创建一个 User 对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/get</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.在 src 目录下创建 spring 核心文件 applicaitonContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将User对象交给spring容器管理 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Bean元素:使用该元素描述需要 spring 容器管理的对象</span></span><br><span class="line"><span class="comment">            class属性:被管理对象的完整类名.</span></span><br><span class="line"><span class="comment">            name属性:给被管理的对象起个名字.获得对象时根据该名称获得对象.</span></span><br><span class="line"><span class="comment">                    可以重复.可以使用特殊字符.</span></span><br><span class="line"><span class="comment">            id属性: 与name属性一模一样.</span></span><br><span class="line"><span class="comment">                    名称不可重复.不能使用特殊字符.</span></span><br><span class="line"><span class="comment">            结论: 尽量使用name属性.</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.bean.User"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建容器对象</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">// 从容器中获取 user 对象</span></span><br><span class="line">User u = (User) ac.getBean(<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring概念"><a href="#Spring概念" class="headerlink" title="Spring概念"></a>Spring概念</h4><blockquote><p>1.思想<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">① IOC ( Inverse Of Control ) 反转控制</span><br><span class="line"></span><br><span class="line">将我们创建对象的方式反转了</span><br><span class="line">以前对象的创建是由开发自己维护，保护依赖关系也是开发人员自己维护</span><br><span class="line"></span><br><span class="line">使用 Spring 之后，对象的创建以及依赖关系就交由 Spring 完成创建以及注入</span><br><span class="line">反转控制就是反转了对象的创建方式，从我们自己创建反转给了 Spring 创建</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">② DI ( Dependency Injection ) 依赖注入</span><br><span class="line"></span><br><span class="line">实现 IOC 思想需要 DI 做支持</span><br><span class="line"></span><br><span class="line">注入方式：set 方法注入，构造方法注入，字段注入</span><br><span class="line"></span><br><span class="line">注入类型：值类型注入( 8大基本数据类型 ) ， 引用类型注入( 将依赖对象注入 )</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.ApplicationContext 和 BeanFactory 区别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">① BeanFactory 接口</span><br><span class="line"></span><br><span class="line">spring 原始接口，针对原始接口的实现类功能较为单一</span><br><span class="line"></span><br><span class="line">BeanFactory接口实现类的容器，特点是每次在获得对象时才会创建对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">② ApplicationContext</span><br><span class="line"></span><br><span class="line">每次容器启动时就会创建容器中配置的所有对象，并提供更多功能</span><br><span class="line"></span><br><span class="line">从类路径下加载配置文件：ClassPathXmlApplicationContext</span><br><span class="line"></span><br><span class="line">从硬盘绝对路径下加载配置文件：FileSystemXmlApplicationContext(&quot;d:/xxx/yyy/xxx&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结论：web开发中,使用applicationContext，在资源匮乏的环境可以使用BeanFactory.</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h4><blockquote><p>1.Bean 元素<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">scope属性</span></span><br><span class="line"><span class="comment">singleton(默认值)：单例对象，被标识为单例的对象在spring容器中只会存在一个实例</span></span><br><span class="line"><span class="comment">prototype：多例原型，被标识为多例的对象，每次再获得才会创建，每次创建都是新的对象，整合struts2时，ActionBean必须配置为多例的.</span></span><br><span class="line"><span class="comment">request：web环境下，对象与request生命周期一致.（基本不用）</span></span><br><span class="line"><span class="comment">session：web环境下，对象与session生命周期一致.（基本不用）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.bean.User"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">init-method：spring会在对象创建之后立即调用</span></span><br><span class="line"><span class="comment">destory-method：spring容器在关闭并销毁所有容器中的对象之前调用.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.bean.User"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.Spring 创建对象的方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.空参构造方式</span></span><br><span class="line">&lt;bean name=<span class="string">"user"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.paxsz.bean.User"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.静态工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"静态工厂创建User"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;bean name=<span class="string">"user2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.paxsz.b_create.UserFactory"</span> factory-method=<span class="string">"createUser"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.实例工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">createUser2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"实例工厂创建User"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;bean name=<span class="string">"user3"</span> factory-bean=<span class="string">"userFactory"</span> factory-method=<span class="string">"createUser2"</span>/&gt;</span><br><span class="line">&lt;bean name=<span class="string">"userFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.paxsz.b_create.UserFactory"</span>/&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.Spring的分模块配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- 导入其他 spring 配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"com/paxsz/b_create/applicationContext.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring属性注入"><a href="#Spring属性注入" class="headerlink" title="Spring属性注入"></a>Spring属性注入</h4><blockquote><p>1.基本类型注入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 注入方式有以下几种，常用的是第一种</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1. set 方式注入: --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.bean.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--值类型注入: 为 User 对象中名为 name 的属性注入 jiechen 作为值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"jiechen"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"22"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用类型注入: 为car属性注入下方配置的car对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.构造函数注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.bean.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"jiechen"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span> <span class="attr">index</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">3. P 名称空间注入, 走 set 方法</span></span><br><span class="line"><span class="comment">①.需要在头部导入 P 名称空间  xmlns:p="http://www.springframework.org/schema/p"</span></span><br><span class="line"><span class="comment">②.使用p:属性完成注入</span></span><br><span class="line"><span class="comment">|-值类型: p:属性名="值"</span></span><br><span class="line"><span class="comment">|-对象类型: p:属性名-ref="bean名称"</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user3"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.bean.User"</span> <span class="attr">p:name</span>=<span class="string">"jiechen"</span> <span class="attr">p:age</span>=<span class="string">"22"</span> <span class="attr">p:car-ref</span>=<span class="string">"car"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">spel注入: spring Expression Language sping 表达式语言</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"user4"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.bean.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;user.name&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"#&#123;user3.age&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.复杂类型注入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1.数组类型注入</span></span><br><span class="line"><span class="comment">如果数组中只准备注入一个值(对象),直接使用value|ref即可</span></span><br><span class="line"><span class="comment">&lt;property name="arr" value="tom" &gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- array注入,多个元素注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arr"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user4"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">2.List类型注入</span></span><br><span class="line"><span class="comment">如果List中只准备注入一个值(对象),直接使用value|ref即可</span></span><br><span class="line"><span class="comment">&lt;property name="list" value="jack" &gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>rose<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user3"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">3.map类型注入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///crm"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"user"</span> <span class="attr">value-ref</span>=<span class="string">"user4"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"user3"</span> <span class="attr">value-ref</span>=<span class="string">"user2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">4.properties 类型注入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prop"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driverClass"</span>&gt;</span>com.jdbc.mysql.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"userName"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>654321<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring的生命周期"><a href="#Spring的生命周期" class="headerlink" title="Spring的生命周期"></a>Spring的生命周期</h4><blockquote><p>Spring 作为一个容器工厂，在 web 项目中，要保证它和项目同生共死<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 web.xml 中加入如下配置</span></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 需要加入spring-web-<span class="number">4.2</span>.4.RELEASE.jar --&gt;</span><br><span class="line">    &lt;!-- 让 spring 容器随项目的启动而创建，随项目的关闭而销毁 --&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;!-- 指定加载 <span class="title">spring</span> 配置文件的位置 --&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">context</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Action中获得容器</span></span><br><span class="line"><span class="comment">// 1.获得 ServletContext 对象</span></span><br><span class="line">ServletContext servletContext = ServletActionContext.getServletContext();</span><br><span class="line"><span class="comment">// 2.从 ServletContext 获得 WebApplicationContext</span></span><br><span class="line">WebApplicationContext appllication = WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring中注解配置的使用"><a href="#Spring中注解配置的使用" class="headerlink" title="Spring中注解配置的使用"></a>Spring中注解配置的使用</h4><blockquote><p>1.加入 spring-aop-4.2.4.RELEASE.jar<br>2.开启使用注解代理配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">指定扫描cn.paxsz.bean报下的所有类中的注解.</span></span><br><span class="line"><span class="comment"> 注意:扫描包时.会扫描指定报下的所有子孙包</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.paxsz.bean2"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.在类中使用注解完成配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①将对象注册到容器</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="comment">//@Service("user") // service层</span></span><br><span class="line"><span class="comment">//@Controller("user") // web层</span></span><br><span class="line"><span class="comment">//  @Repository("user")// dao层</span></span><br><span class="line"><span class="meta">@Scope</span>(scopeName = <span class="string">"singleton"</span>) <span class="comment">// 指定对象的作用范围</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ②值类型注入</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"jiechen"</span>)<span class="comment">// 通过反射的 Field 赋值，破坏了封装性</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"jiechen"</span>)<span class="comment">// 通过 set 方法赋值，推荐使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ③引用类型注入</span></span><br><span class="line"><span class="comment">// 1.自动装配，如果匹配多个类型一致的对象，将无法装配</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. @Qualifier 注解告诉 spring 装配那个名称的对象，两者配合，可以匹配多个类型一致的情况</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(<span class="string">"car"</span>)</span><br><span class="line"><span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.手动注入，指明注入哪个名称的对象，相当于 @Autowired 和  @Qualifier() 同时使用 </span></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"car"</span>)</span><br><span class="line"><span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ④初始化和销毁方法</span></span><br><span class="line"><span class="meta">@PostConstruct</span><span class="comment">// 相当于 init-method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是初始化方法!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestroy</span><span class="comment">// 相当于 init-method</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是销毁方法!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring与junit整合测试"><a href="#Spring与junit整合测试" class="headerlink" title="Spring与junit整合测试"></a>Spring与junit整合测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 帮我们创建容器</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext.xml"</span>) <span class="comment">// 指定创建容器时使用哪个配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将名为user的对象注入到u变量中</span></span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"user"</span>)</span><br><span class="line">    <span class="keyword">private</span> User u;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring中的aop"><a href="#Spring中的aop" class="headerlink" title="Spring中的aop"></a>Spring中的aop</h4><p>Spring 能够为容器中管理的对象生成动态代理对象，Spring 实现 aop 的原理有两种，通过动态代理和使用 cglib 代理</p><blockquote><p>1.动态代理(优先)<br>被代理对象必须要实现接口，才能产生代理对象，如果没有接口将不能使用动态代理技术<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxyFactory</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService us;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxyFactory</span><span class="params">(UserService us)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.us = us;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成动态代理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">getUserServiceProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserService usProxy = (UserService) Proxy.newProxyInstance(UserServiceProxyFactory.class.getClassLoader(), UserServiceImpl.class.getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> usProxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开事务!"</span>);</span><br><span class="line">        Object invoke = method.invoke(us, args);</span><br><span class="line">        System.out.println(<span class="string">"提交事务!"</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImpl();<span class="comment">// 必须要接口</span></span><br><span class="line">UserServiceProxyFactory factory = <span class="keyword">new</span> UserServiceProxyFactory(us);</span><br><span class="line">UserService serviceProxy = factory.getUserServiceProxy();</span><br><span class="line">serviceProxy.save();</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.cglib代理(没有接口)<br>第三方代理技术： cglib 代理，可以对任何类生成代理，代理的原理是对目标对象进行继承代理，如果目标对象被 final 修饰，那么该类无法被 cglib 代理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cglib代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxyFactory2</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">getUserServiceProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//帮我们生成代理对象</span></span><br><span class="line">        Enhancer en = <span class="keyword">new</span> Enhancer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置对谁进行代理</span></span><br><span class="line">        en.setSuperclass(UserServiceImpl.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理要做什么</span></span><br><span class="line">        en.setCallback(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        UserService us = (UserService) en.create();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> us;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//打开事务</span></span><br><span class="line">        System.out.println(<span class="string">"打开事务!"</span>);</span><br><span class="line"></span><br><span class="line">        Object invokeSuper = methodProxy.invokeSuper(o, objects);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        System.out.println(<span class="string">"提交事务!"</span>);</span><br><span class="line">        <span class="keyword">return</span> invokeSuper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">UserServiceProxyFactory2 factory2 = <span class="keyword">new</span> UserServiceProxyFactory2();</span><br><span class="line">UserService proxy = factory2.getUserServiceProxy();</span><br><span class="line">proxy.save();</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring中aop名词"><a href="#Spring中aop名词" class="headerlink" title="Spring中aop名词"></a>Spring中aop名词</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Joinpoint：连接点，目标对象中 所有可以增强的方法</span><br><span class="line">Pointcut：切入点，目标对象中 要增强的方法</span><br><span class="line"></span><br><span class="line">Advice：通知/增强，增强的代码</span><br><span class="line">Target：目标对象，即被代理的对象</span><br><span class="line"></span><br><span class="line">Weaving：织入，将通知应用到切入点的过程</span><br><span class="line">Proxy：代理，将通知织入到目标对象之后，形成代理对象</span><br><span class="line">aspect：切面，切入点 + 通知</span><br></pre></td></tr></table></figure><h4 id="Spring中的aop小案例"><a href="#Spring中的aop小案例" class="headerlink" title="Spring中的aop小案例"></a>Spring中的aop小案例</h4><blockquote><p>准备工作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①导入 spring 中的 aop 相关的 jar</span></span><br><span class="line"><span class="comment">//spring-aspects-4.2.4.RELEASE.jar</span></span><br><span class="line"><span class="comment">//spring-aop-4.2.4.RELEASE.jar</span></span><br><span class="line"><span class="comment">//com.springsource.org.aopalliance-1.0.0.jar</span></span><br><span class="line"><span class="comment">//com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ②准备目标对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"保存用户!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"删除用户!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"更新用户!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查找用户!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>1.通过 xml 配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①准备通知对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     * |-目标方法运行之前调用</span></span><br><span class="line"><span class="comment">     * 后置通知(如果出现异常不会调用)</span></span><br><span class="line"><span class="comment">     * |-在目标方法运行之后调用</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     * |-在目标方法之前和之后都调用</span></span><br><span class="line"><span class="comment">     * 异常拦截通知</span></span><br><span class="line"><span class="comment">     * |-如果出现异常,就会调用</span></span><br><span class="line"><span class="comment">     * 后置通知(无论是否出现 异常都会调用)</span></span><br><span class="line"><span class="comment">     * |-在目标方法运行之后调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是前置通知!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是后置通知(如果出现异常不会调用)!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是环绕通知之前的部分!!"</span>);</span><br><span class="line">        Object proceed = pjp.proceed();<span class="comment">//调用目标方法</span></span><br><span class="line">        System.out.println(<span class="string">"这是环绕通知之后的部分!!"</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"出事啦!出现异常了!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是后置通知(出现异常也会调用)!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②配置进行织入,将通知织入目标对象中</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- <span class="number">1</span>.配置目标对象 --&gt;</span><br><span class="line">    &lt;bean name=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.paxsz.service.UserServiceImpl"</span>/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!-- <span class="number">2</span>.配置通知对象 --&gt;</span><br><span class="line">    &lt;bean name=<span class="string">"myAdvice"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.paxsz.g_spring_aop.MyAdvice"</span>/&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!-- <span class="number">3</span>.配置将通知织入目标对象 --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!-- 配置切入点 --&gt;</span><br><span class="line">        &lt;aop:pointcut id=<span class="string">"pc"</span> expression=<span class="string">"execution(* com.paxsz.service.*ServiceImpl.*(..))"</span>/&gt;</span><br><span class="line">        &lt;aop:aspect ref=<span class="string">"myAdvice"</span>&gt;</span><br><span class="line">            &lt;aop:before method=<span class="string">"before"</span> pointcut-ref=<span class="string">"pc"</span>/&gt;</span><br><span class="line">            &lt;aop:after-returning method=<span class="string">"afterReturning"</span> pointcut-ref=<span class="string">"pc"</span>/&gt;</span><br><span class="line">            &lt;aop:around method=<span class="string">"around"</span> pointcut-ref=<span class="string">"pc"</span>/&gt;</span><br><span class="line">            &lt;aop:after-throwing method=<span class="string">"afterException"</span> pointcut-ref=<span class="string">"pc"</span>/&gt;</span><br><span class="line">            &lt;aop:after method=<span class="string">"after"</span> pointcut-ref=<span class="string">"pc"</span>/&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.通过注解方式<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ①准备通知对象，并在对应的地方加上响应的注解</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//表示该类是一个通知类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.paxsz.service.*ServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"MyAdvice.pc()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是前置通知!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"MyAdvice.pc()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是后置通知(如果出现异常不会调用)!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"MyAdvice.pc()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是环绕通知之前的部分!!"</span>);</span><br><span class="line">        Object proceed = pjp.proceed();<span class="comment">//调用目标方法</span></span><br><span class="line">        System.out.println(<span class="string">"这是环绕通知之后的部分!!"</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"MyAdvice.pc()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"出事啦!出现异常了!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"MyAdvice.pc()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是后置通知(出现异常也会调用)!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②开启注解</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="number">1</span>.配置目标对象 --&gt;</span><br><span class="line">    &lt;bean name=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.paxsz.service.UserServiceImpl"</span>/&gt;</span><br><span class="line">    &lt;!-- <span class="number">2</span>.配置通知对象 --&gt;</span><br><span class="line">    &lt;bean name=<span class="string">"myAdvice"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.paxsz.h_annotation_aop.MyAdvice"</span>/&gt;</span><br><span class="line">    &lt;!-- <span class="number">3</span>.开启使用注解完成织入 --&gt;</span><br><span class="line">    &lt;aop:aspectj-autoproxy/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring整合JDBC"><a href="#Spring整合JDBC" class="headerlink" title="Spring整合JDBC"></a>Spring整合JDBC</h4><blockquote><p>1.Spring 提供了很多模板整合 Dao 技术<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ORM持久化技术  --&gt; 模板类</span><br><span class="line">--------------------------------</span><br><span class="line">JDBC  --&gt; JDBCTemplate</span><br><span class="line">Hibernate3.0  --&gt;  HibernateTemplate</span><br><span class="line">IBatis  --&gt;  SqlMapClientTemplate</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.整合 JDBC 步骤<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// ①继承 JdbcDaoSupport</span><br><span class="line">// 使用JDBC模板实现增删改查</span><br><span class="line">public class UserDaoImpl extends JdbcDaoSupport implements UserDao &#123;</span><br><span class="line">// 操作步骤见源码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ②配置 applicationContext</span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定spring读取db.properties配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.将连接池放入spring容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.将UserDao放入spring容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.i_jdbc_template.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring中的aop事务"><a href="#Spring中的aop事务" class="headerlink" title="Spring中的aop事务"></a>Spring中的aop事务</h4><blockquote><p>事务操作对象，因为在不同平台，操作事务的代码各不相同，spring提供了一个接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PlatformTransactionManager 接口</span><br><span class="line">|-- DataSourceTransactionManager</span><br><span class="line">|-- HibernateTransitionmanager</span><br><span class="line"></span><br><span class="line">注意：在 spring 中玩事务管理，最为核心的对象就是 TransactionManager 对象</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>事务传播行为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PROPAGATION_REQUIRED  支持当前事务，如果不存在，就新建一个(默认)</span><br><span class="line">PROPAGATION_SUPPORTS  支持当前事务，如果不存在，就不使用事务</span><br><span class="line">PROPAGATION_MANDATORY  支持当前事务，如果不存在，就抛出异常</span><br><span class="line"></span><br><span class="line">PROPAGATION_REQUIRED_NEW  如果有事务存在，挂起当前事务，创建一个新的事务</span><br><span class="line">PROPAGATION_NOT_SUPPORTED  以非事务方式运行，如果有事务存在，挂起当前事务</span><br><span class="line">PROPAGATION_NEVER  以非事务方式运行，如果有事务存在，抛出异常</span><br><span class="line">PROPAGATION_NESTED  如果当前事务存在，则嵌套事务执行</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Spring管理事务方式"><a href="#Spring管理事务方式" class="headerlink" title="Spring管理事务方式"></a>Spring管理事务方式</h4><blockquote><p>1.编码式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ①将核心事务管理器配置到 spring 容器中 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务核心管理器,封装了所有事务操作. 依赖于连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ②配置TransactionTemplate模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ③将事务模板注入Service --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.j_dao_tx.service.AccountServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ad"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tt"</span> <span class="attr">ref</span>=<span class="string">"transactionTemplate"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ④在Service中调用模板 --&gt;</span></span><br><span class="line">tt.execute(new TransactionCallbackWithoutResult() &#123;</span><br><span class="line">@Override</span><br><span class="line">protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) &#123;</span><br><span class="line">// 数据操作，若有异常，自动回滚事务</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.xml配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ①配置事务通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">以方法为单位,指定方法应用什么事务属性</span></span><br><span class="line"><span class="comment">isolation:隔离级别</span></span><br><span class="line"><span class="comment">propagation:传播行为</span></span><br><span class="line"><span class="comment">read-only:是否只读</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"persist*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"modify*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"remove*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">isolation</span>=<span class="string">"REPEATABLE_READ"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ②配置将通知织入目标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置切点表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.paxsz.j_dao_tx.service.*ServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">配置切面 : 通知+切点</span></span><br><span class="line"><span class="comment">advice-ref:通知的名称</span></span><br><span class="line"><span class="comment">pointcut-ref:切点的名称</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// ③代码中</span><br><span class="line">public void transfer(Integer from, Integer to, Double money) &#123;</span><br><span class="line">// 数据操作，若有异常，自动回滚事务</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.注解式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ①开启使用事务注解管理aop事务 --&gt;</span><br><span class="line">&lt;tx:annotation-driven/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ②使用注解</span></span><br><span class="line"><span class="meta">@Transactional</span>(isolation = Isolation.REPEATABLE_READ, propagation = Propagation.REQUIRED, readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(isolation = Isolation.REPEATABLE_READ, propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Integer from, Integer to, Double money)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据操作，若有异常，自动回滚事务</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><blockquote><p>bean相关约束的引入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      记录spring基本知识点
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://lingchenjie.club/tags/java/"/>
    
      <category term="web框架" scheme="http://lingchenjie.club/tags/web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="spring" scheme="http://lingchenjie.club/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>struts2+spring+hibernate小案列</title>
    <link href="http://lingchenjie.club/2018/03/19/struts2-spring-hibernate%E5%B0%8F%E6%A1%88%E5%88%97/"/>
    <id>http://lingchenjie.club/2018/03/19/struts2-spring-hibernate小案列/</id>
    <published>2018-03-19T08:38:44.000Z</published>
    <updated>2018-03-22T07:58:18.490Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>本文分享一个 struts2 + spring + hibernate 开发的一个小案例，主要的技术点有：封装了 Dao 的处理、分页逻辑的实现，用户注册登录等，本文案例 github 地址：<a href="https://github.com/LingChenJie/crm" target="_blank" rel="noopener">https://github.com/LingChenJie/crm</a></p><h4 id="分页逻辑的实现"><a href="#分页逻辑的实现" class="headerlink" title="分页逻辑的实现"></a>分页逻辑的实现</h4><blockquote><p>1.封装 PageBean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer currentPage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总记录条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页显示的条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalPage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前的记录的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentPage 当前页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalCount  总条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize    每页显示条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PageBean</span><span class="params">(Integer currentPage, Integer totalCount, Integer pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentPage = currentPage;</span><br><span class="line">        <span class="keyword">this</span>.totalCount = totalCount;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentPage == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如页面没有指定显示那一页.显示第一页</span></span><br><span class="line">            <span class="keyword">this</span>.currentPage = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pageSize == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果每页显示条数没有指定,默认每页显示3条</span></span><br><span class="line">            <span class="keyword">this</span>.pageSize = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算总页数</span></span><br><span class="line">        <span class="keyword">this</span>.totalPage = (<span class="keyword">this</span>.totalCount + <span class="keyword">this</span>.pageSize - <span class="number">1</span>) / <span class="keyword">this</span>.pageSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断当前页码是否超出范围</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentPage &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.currentPage = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentPage &gt; <span class="keyword">this</span>.totalPage) &#123;</span><br><span class="line">            <span class="keyword">this</span>.currentPage = <span class="keyword">this</span>.totalPage;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算起始索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span>.currentPage - <span class="number">1</span>) * <span class="keyword">this</span>.pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.书写 Action，完成 CustomerAction 创建<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Customer customer = <span class="keyword">new</span> Customer();<span class="comment">// 使用驱动模型，完成数据的注入，前端表单 name 字段要和 Customer 的属性相对应</span></span><br><span class="line">    <span class="keyword">private</span> CustomerService cs;<span class="comment">// 在 spring 中完成 Service 对象的注入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer currentPage;<span class="comment">// 当前页码，使用属性数据注入，要实现 get/set，前端表单 name 字段要和该字段相对应</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;<span class="comment">// 每页显示条数，使用属性数据注入，要实现 get/set，前端表单 name 字段要和该字段相对应</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 封装离线查询对象</span></span><br><span class="line">        DetachedCriteria dc = DetachedCriteria.forClass(Customer.class);</span><br><span class="line">        <span class="comment">// 判断参数并封装参数</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(customer.getCust_name())) &#123;</span><br><span class="line">            dc.add(Restrictions.like(<span class="string">"cust_name"</span>, <span class="string">"%"</span> + customer.getCust_name() + <span class="string">"%"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 Service 的方法，完成分页数据的查询</span></span><br><span class="line">        PageBean pageBean = cs.getPageBean(dc, currentPage, pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将pageBean放入request域中，转发到列表页面中显示</span></span><br><span class="line">        ActionContext.getContext().put(<span class="string">"pageBean"</span>, pageBean);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Customer <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> customer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCs</span><span class="params">(CustomerService cs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cs = cs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.完成了 Action，根据 Action 的需求完成 Service 的书写，完成 CustomerServiceImpl 的创建<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用注解方式进行事务管理，需要在 applicationContext 中开启注解事务</span></span><br><span class="line"><span class="meta">@Transactional</span>(isolation = Isolation.REPEATABLE_READ, propagation = Propagation.REQUIRED, readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerServiceImpl</span> <span class="keyword">implements</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CustomerDao cd;<span class="comment">// 在 spring 中完成 Dao 对象的注入</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageBean <span class="title">getPageBean</span><span class="params">(DetachedCriteria dc, Integer currentPage, Integer pageSize)</span> </span>&#123;</span><br><span class="line">        Integer totalCount = cd.getTotalCount(dc);</span><br><span class="line">        PageBean pageBean = <span class="keyword">new</span> PageBean(currentPage, totalCount, pageSize);</span><br><span class="line">        List&lt;Customer&gt; list = cd.getPageList(dc, pageBean.getStart(), pageBean.getPageSize());</span><br><span class="line">        pageBean.setList(list);</span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.根据 Service 的需求完成 Dao 的书写，完成 CustomerDaoImpl 的创建<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTotalCount</span><span class="params">(DetachedCriteria dc)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置查询的聚合函数,总记录数</span></span><br><span class="line">        dc.setProjection(Projections.rowCount());</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; list = (List&lt;Long&gt;) getHibernateTemplate().findByCriteria(dc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空之前设置的聚合函数</span></span><br><span class="line">        dc.setProjection(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) ? list.get(<span class="number">0</span>).intValue() : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Customer&gt; <span class="title">getPageList</span><span class="params">(DetachedCriteria dc, Integer start, Integer pageSize)</span> </span>&#123;</span><br><span class="line">        List&lt;Customer&gt; list = (List&lt;Customer&gt;) getHibernateTemplate().findByCriteria(dc, start, pageSize);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5.完成 struts2 的配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将action的创建交给spring容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objectFactory"</span> <span class="attr">value</span>=<span class="string">"spring"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"CustomerAction_*"</span> <span class="attr">class</span>=<span class="string">"customerAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span>/jsp/customer/list.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>6.完成 spring 的配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 读取db.properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置c3p0连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 核心事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将SessionFactory配置到spring容器中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置hibernate基本信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入orm元数据,指定orm元数据所在的包路径,spring会自动读取包中的所有配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingDirectoryLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/paxsz/bean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- action --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意:Action对象作用范围一定是多例的.这样才符合struts2架构 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"customerAction"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.web.action.CustomerAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cs"</span> <span class="attr">ref</span>=<span class="string">"customerService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"customerService"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.service.impl.CustomerServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cd"</span> <span class="attr">ref</span>=<span class="string">"customerDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"customerDao"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.dao.impl.CustomerDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>7.完成前端代码的书写，具体查看源码即可</p></blockquote><h4 id="BaseDao的抽取"><a href="#BaseDao的抽取" class="headerlink" title="BaseDao的抽取"></a>BaseDao的抽取</h4><blockquote><p>BaseDao 抽取共有的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">getById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">getTotalCount</span><span class="params">(DetachedCriteria dc)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">getPageList</span><span class="params">(DetachedCriteria dc, Integer start, Integer pageSize)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>BaseDaoImpl 的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">HibernateDaoSupport</span> <span class="keyword">implements</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 知识点补充：</span></span><br><span class="line"><span class="comment">     *  getClass()：获取的是实际运行的类的字节码</span></span><br><span class="line"><span class="comment">     *  getGenericInterfaces()：以Type数组的形式返回本类直接实现的接口列表，包含了泛型参数信息</span></span><br><span class="line"><span class="comment">     *  getGenericSuperclass()：以Type数组的形式返回本类直接继承的类列表，包含了泛型参数信息</span></span><br><span class="line"><span class="comment">     *  getActualTypeArguments() ：获取泛型类型的实际类型参数集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于接收运行期泛型类型</span></span><br><span class="line">    <span class="keyword">private</span> Class clazz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得当前类的带有泛型类型的父类</span></span><br><span class="line">        ParameterizedType ptClass = (ParameterizedType) <span class="keyword">this</span>.getClass().getGenericSuperclass();</span><br><span class="line">        <span class="comment">// 获得运行期的泛型类型</span></span><br><span class="line">        clazz = (Class) ptClass.getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        getHibernateTemplate().save(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        getHibernateTemplate().delete(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Serializable id)</span> </span>&#123;</span><br><span class="line">        T t = getById(id);</span><br><span class="line">        delete(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        getHibernateTemplate().update(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getById</span><span class="params">(Serializable id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) getHibernateTemplate().get(clazz, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTotalCount</span><span class="params">(DetachedCriteria dc)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置查询的聚合函数,总记录数</span></span><br><span class="line">        dc.setProjection(Projections.rowCount());</span><br><span class="line"></span><br><span class="line">        List&lt;Long&gt; list = (List&lt;Long&gt;) getHibernateTemplate().findByCriteria(dc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空之前设置的聚合函数</span></span><br><span class="line">        dc.setProjection(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) ? list.get(<span class="number">0</span>).intValue() : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getPageList</span><span class="params">(DetachedCriteria dc, Integer start, Integer pageSize)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; list = (List&lt;T&gt;) getHibernateTemplate().findByCriteria(dc, start, pageSize);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdate</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        getHibernateTemplate().saveOrUpdate(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.进行使用，修改 CustomerDao<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CustomerDao</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CustomerDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Customer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CustomerDaoImpl</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">Customer</span>&gt; <span class="keyword">implements</span> <span class="title">CustomerDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="用户注册及登录功能实现"><a href="#用户注册及登录功能实现" class="headerlink" title="用户注册及登录功能实现"></a>用户注册及登录功能实现</h4><blockquote><p>1.书写 UserAction<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">private</span> UserService us;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 调用Service执行登录逻辑</span></span><br><span class="line">        User user = us.getUserByCodePassword(<span class="keyword">this</span>.user);</span><br><span class="line">        <span class="comment">// 将返回的user对象放入session域</span></span><br><span class="line">        ActionContext.getContext().getSession().put(<span class="string">"user"</span>, user);</span><br><span class="line">        <span class="comment">// 重定向到首页</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"toHome"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">regist</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.调用Service保存注册用户</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            us.saveUser(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            ActionContext.getContext().put(<span class="string">"error"</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"regist"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.重定向到登录页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"toLogin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUs</span><span class="params">(UserService us)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.us = us;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.书写 UserServiceImpl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(isolation = Isolation.REPEATABLE_READ, propagation = Propagation.REQUIRED, readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao ud;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByCodePassword</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">        User queryU = ud.getByUserCode(u.getUser_code());</span><br><span class="line">        <span class="keyword">if</span> (queryU == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户名不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!queryU.getUser_password().equals(u.getUser_password())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queryU;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(isolation = Isolation.REPEATABLE_READ, propagation = Propagation.REQUIRED, readOnly = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">        ud.save(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUd</span><span class="params">(UserDao ud)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ud = ud;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.书写 UserDaoImpl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDaoImpl</span>&lt;<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getByUserCode</span><span class="params">(String userCode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Criteria</span></span><br><span class="line">        DetachedCriteria dc = DetachedCriteria.forClass(User.class);</span><br><span class="line">        dc.add(Restrictions.eq(<span class="string">"user_code"</span>, userCode));</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) getHibernateTemplate().findByCriteria(dc);</span><br><span class="line">        <span class="keyword">return</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) ? list.get(<span class="number">0</span>) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.自定义拦截器，校验是否登录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation actionInvocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获得Session</span></span><br><span class="line">        Map&lt;String, Object&gt; session = ActionContext.getContext().getSession();</span><br><span class="line">        <span class="comment">// 2.获得登录标识</span></span><br><span class="line">        User user = (User) session.get(<span class="string">"user"</span>);</span><br><span class="line">        <span class="comment">// 判断登录标识</span></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;<span class="comment">// 存在，放行</span></span><br><span class="line">            <span class="keyword">return</span> actionInvocation.invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"toLogin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5.配置 struts.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"crm"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注册拦截器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"privilegeInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.web.interceptor.PrivilegeInterceptor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"privilegeInterceptor"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不校验 login 和 regist --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeMethods"</span>&gt;</span>login,regist<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定默认的拦截器栈 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 全局结果集配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"toLogin"</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 全局异常集 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">global-exception-mappings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exception-mapping</span> <span class="attr">result</span>=<span class="string">"error"</span> <span class="attr">exception</span>=<span class="string">"java.lang.RuntimeException"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">global-exception-mappings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- action --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"UserAction_*"</span> <span class="attr">class</span>=<span class="string">"userAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"toHome"</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>/index.htm<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"toLogin"</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"regist"</span>&gt;</span>/regist.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>6.配置 applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- action --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.web.action.UserAction"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"us"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ud"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.dao.impl.UserDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      记录Strust2基本知识点
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://lingchenjie.club/tags/java/"/>
    
      <category term="web框架" scheme="http://lingchenjie.club/tags/web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Strust2" scheme="http://lingchenjie.club/tags/Strust2/"/>
    
      <category term="spring" scheme="http://lingchenjie.club/tags/spring/"/>
    
      <category term="hibernate" scheme="http://lingchenjie.club/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Struts2的学习记录</title>
    <link href="http://lingchenjie.club/2018/03/19/Struts2%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/03/19/Struts2的学习记录/</id>
    <published>2018-03-19T02:31:18.000Z</published>
    <updated>2018-03-19T08:22:13.145Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>Strust2 是一个基于 MVC 设计模式的 web 应用框架，它的本质相当于一个 Servlet ，在 MVC 设计模式中，Strus2 作为控制器存在.</p><p>本文案列的 github 地址：<a href="https://github.com/LingChenJie/struts2_use" target="_blank" rel="noopener">https://github.com/LingChenJie/struts2_use</a></p><h4 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h4><blockquote><p>1.下载 strust2 相关 jar 包：<a href="http://struts.apache.org/download.cgi" target="_blank" rel="noopener">http://struts.apache.org/download.cgi</a> ，本文使用的是 strust-2.3.24 ，我们使用的 jar 包是解压后 apps/struts2-blank.war 中的 jar 包<br><img src="/2018/03/19/Struts2的学习记录/struts_1.png" alt="Strus2"></p></blockquote><blockquote><p>2.书写 Action 类，就是一个普通 java 类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.书写 struts.xml ，放在 src 目录下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">package:将Action配置封装.就是可以在Package中配置很多action.</span></span><br><span class="line"><span class="comment">            name属性: 给包起个名字,起到标识作用.随便起.不能其他包名重复.</span></span><br><span class="line"><span class="comment">            namespace属性:给action的访问路径中定义一个命名空间</span></span><br><span class="line"><span class="comment">            extends属性: 继承一个 指定包</span></span><br><span class="line"><span class="comment">            abstract属性:包是否为抽象的; 标识性属性.标识该包不能独立运行.专门被继承</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">namespace</span>=<span class="string">"/hello"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">action元素:配置action类</span></span><br><span class="line"><span class="comment">                name属性: 决定了Action访问资源名.</span></span><br><span class="line"><span class="comment">                class属性: action的完整类名</span></span><br><span class="line"><span class="comment">                method属性: 指定调用Action中的哪个方法来处理请求</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"HelloAction"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.a_hello.HelloAction"</span> <span class="attr">method</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">result元素:结果配置</span></span><br><span class="line"><span class="comment">                    name属性: 标识结果处理的名称.与action方法的返回值对应.</span></span><br><span class="line"><span class="comment">                    type属性: 指定调用哪一个result类来处理结果,默认使用转发.</span></span><br><span class="line"><span class="comment">                    标签体:填写页面的相对路径</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.将 struts2 核心过滤器配置到 web.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- struts2核心过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5.测试<br><img src="/2018/03/19/Struts2的学习记录/struts_2.png" alt="Struts2"></p></blockquote><h4 id="struts2架构"><a href="#struts2架构" class="headerlink" title="struts2架构"></a>struts2架构</h4><blockquote><p>从客户端发送请求过来，首先经过前端控制器( StrusPrepareAndExecuteFilter ) ，在控制器中执行一组拦截器，在拦截器中定义了很多拦截器，拦截器执行完，就会执行目标 Action ,在 Action 中返回一个结果视图，根据 Result 的配置进行页面的跳转.<br><img src="/2018/03/19/Struts2的学习记录/struts_3.png" alt="Strus2"></p></blockquote><h4 id="strust2常量配置"><a href="#strust2常量配置" class="headerlink" title="strust2常量配置"></a>strust2常量配置</h4><blockquote><p>1.struts2 常量的加载顺序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">① src 下创建的 struts.xml </span><br><span class="line">&lt;constant name=&quot;struts.i18n.encoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class="line"></span><br><span class="line">② src 下创建的 strus.properties</span><br><span class="line">struts.i18n.encoding=UTF8</span><br><span class="line"></span><br><span class="line">③ 项目中的 web.xml</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">&lt;param-name&gt;struts.i18n.encoding&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;UTF-8&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.struts 的常量配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- i18n:国际化. 解决post提交乱码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.i18n.encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">指定访问 action 时的后缀名</span></span><br><span class="line"><span class="comment">http://localhost:8080/struts2_use/hello/HelloAction.action</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"action"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">指定struts2是否以开发模式运行</span></span><br><span class="line"><span class="comment">1.热加载主配置.(不需要重启即可生效)</span></span><br><span class="line"><span class="comment">2.提供更多错误信息输出,方便开发时的调试</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">动态方法调用：通配符方式</span></span><br><span class="line"><span class="comment">使用&#123;1&#125; 取出的就是星号通配的内容</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demoAction_*"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.b_dynamic.DemoAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">struts2 中的默认配置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"default"</span> <span class="attr">namespace</span>=<span class="string">"/default"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 找不到包下的action,会使用Demo2Action作为默认action处理请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">default-action-ref</span> <span class="attr">name</span>=<span class="string">"demo2Action"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- method属性:execute  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- result的name属性:success  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- result的type属性:dispatcher 转发  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class属性:com.opensymphony.xwork2.ActionSupport --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo2Action"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Action创建的几种方式"><a href="#Action创建的几种方式" class="headerlink" title="Action创建的几种方式"></a>Action创建的几种方式</h4><blockquote><p>一般常用第三种，继承 ActionSupport<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式1: 创建一个类.可以是POJO</span></span><br><span class="line"><span class="comment"> * POJO:不用继承任何父类.也不需要实现任何接口.</span></span><br><span class="line"><span class="comment"> * 使struts2框架的代码侵入性更低.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3Action</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式2: 实现一个接口Action</span></span><br><span class="line"><span class="comment"> * 里面有execute方法,提供action方法的规范.</span></span><br><span class="line"><span class="comment"> * Action接口预置了一些字符串.可以在返回结果时使用.为了方便</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4Action</span> <span class="keyword">implements</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式3: 继承一个类.ActionSupport</span></span><br><span class="line"><span class="comment"> * 帮我们实现了 Validateable, ValidationAware, TextProvider, LocaleProvider .</span></span><br><span class="line"><span class="comment"> * 如果我们需要用到这些接口的实现时,不需要自己来实现了.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="结果跳转方式"><a href="#结果跳转方式" class="headerlink" title="结果跳转方式"></a>结果跳转方式</h4><blockquote><p>1.转发 type=”dispatcher”，默认就是转发<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Demo1Action"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.e_result.Demo1Action"</span> <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.重定向 type=”redirect”<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Demo2Action"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.e_result.Demo2Action"</span> <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>/hello.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.转发到Action<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Demo3Action"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.e_result.Demo3Action"</span> <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>Demo1Action<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"namespace"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.重定向Action<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Demo4Action"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.e_result.Demo4Action"</span> <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>Demo1Action<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"namespace"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h4 id="访问-Servlet-Api-的方式"><a href="#访问-Servlet-Api-的方式" class="headerlink" title="访问 Servlet Api 的方式"></a>访问 Servlet Api 的方式</h4><blockquote><p>1.通过 ActionContext<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request域=&gt; map (struts2并不推荐使用原生request域)</span></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line">Map&lt;String, Object&gt; requestScope = (Map&lt;String, Object&gt;) ActionContext.getContext().get(<span class="string">"request"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line">ActionContext.getContext().put(<span class="string">"name"</span>, <span class="string">"requestParam"</span>);</span><br><span class="line"><span class="comment">// session域 =&gt; map</span></span><br><span class="line">Map&lt;String, Object&gt; sessionScope = ActionContext.getContext().getSession();</span><br><span class="line">sessionScope.put(<span class="string">"name"</span>, <span class="string">"sessionParam"</span>);</span><br><span class="line"><span class="comment">// application域 =&gt; map</span></span><br><span class="line">Map&lt;String, Object&gt; applicationScope = ActionContext.getContext().getApplication();</span><br><span class="line">applicationScope.put(<span class="string">"name"</span>, <span class="string">"applicationParam"</span>);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.通过 ServletActionContext<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 并不推荐使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生request</span></span><br><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line"><span class="comment">// 原生session</span></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line"><span class="comment">// 原生response</span></span><br><span class="line">HttpServletResponse response = ServletActionContext.getResponse();</span><br><span class="line"><span class="comment">// 原生ServletContext</span></span><br><span class="line">ServletContext servletContext = ServletActionContext.getServletContext();</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.通过实现接口方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo7Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = Demo7Action.class.getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(TAG);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.request = httpServletRequest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="Action-如何获得参数"><a href="#Action-如何获得参数" class="headerlink" title="Action 如何获得参数"></a>Action 如何获得参数</h4><blockquote><p>Action 的生命周期</p><ol><li>每次请求到来时,都会创建一个新的Action实例</li><li>Action是线程安全的.可以使用成员变量接收参数</li></ol></blockquote><blockquote><p>假设前端的表单数据如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"XXX.action"</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生日:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"birthday"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>1.属性驱动获得参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="comment">// 准备与参数键名称相同的属性</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.对象驱动<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="comment">//准备user对象</span></span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.模型驱动，实现 ModelDriven 接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备user 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><blockquote><p>1.拦截器的创建<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承:MethodFilterInterceptor 方法过滤拦截器</span></span><br><span class="line"><span class="comment">// 功能: 定制拦截器拦截的方法.</span></span><br><span class="line"><span class="comment">// 定制哪些方法需要拦截.</span></span><br><span class="line"><span class="comment">// 定制哪些方法不需要拦截</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MyInterceptor3.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation actionInvocation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 前处理</span></span><br><span class="line">        System.out.println(TAG + <span class="string">" 的前处理！"</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        String result = actionInvocation.invoke();</span><br><span class="line">        <span class="comment">// 后处理</span></span><br><span class="line">        System.out.println(TAG + <span class="string">" 的后处理！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.拦截器配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"inter"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1.注册拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.j_interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.注册拦截器栈 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 自定义拦截器引入(建议放在20个拦截器之前) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- includeMethods:包含，excludeMethods：不包含 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定哪些方法不拦截 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- param name="excludeMethods"&gt;add,delete&lt;/param --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用默认的拦截器栈(20个) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.指定包中的默认拦截器栈 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Demo1Action_*"</span> <span class="attr">class</span>=<span class="string">"com.paxsz.j_interceptor.Demo1Action"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为Action单独指定走哪个拦截器(栈)</span></span><br><span class="line"><span class="comment">&lt;interceptor-ref name="myStack"&gt;&lt;/interceptor-ref&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>关于 Struts2 暂时就介绍到这里，ONGL 的如何使用，ONGL 和 Struts2 如何结合的，以及 Struts2 标签，感兴趣的童鞋可以了解下.</p></blockquote>]]></content>
    
    <summary type="html">
    
      记录Strust2基本知识点
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://lingchenjie.club/tags/java/"/>
    
      <category term="web框架" scheme="http://lingchenjie.club/tags/web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Strust2" scheme="http://lingchenjie.club/tags/Strust2/"/>
    
  </entry>
  
  <entry>
    <title>hibernate的学习记录</title>
    <link href="http://lingchenjie.club/2018/03/17/hibernate%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/03/17/hibernate的学习记录/</id>
    <published>2018-03-17T08:22:47.000Z</published>
    <updated>2018-03-19T02:38:18.376Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>Hibernate 操作数据库的时候，可以以面向对象的方式来完成，它是一款 orm 框架(对象关系映射)，不需要书写 SQL 语句.</p><p>hibernate 的下载地址：<a href="http://hibernate.org/orm/releases" target="_blank" rel="noopener">http://hibernate.org/orm/releases</a> ，本文使用的 hibernate 5.0.7，本文案列的 github 地址：<a href="https://github.com/LingChenJie/hibernate_use" target="_blank" rel="noopener">https://github.com/LingChenJie/hibernate_use</a></p><h4 id="hibernate框架环境搭建"><a href="#hibernate框架环境搭建" class="headerlink" title="hibernate框架环境搭建"></a>hibernate框架环境搭建</h4><blockquote><p>1.导包<br>①数据连接驱动包：mysql-connector-java-5.1.7-bin.jar<br>② hibernate 所需的 jar 包，如下<br><img src="/2018/03/17/hibernate的学习记录/hibernate_1.png" alt="hibernate"></p></blockquote><blockquote><p>2.创建 hibernate 核心配置文件，以及相应的实体类和 ORM 元数据，如下<br><img src="/2018/03/17/hibernate的学习记录/hibernate_2.png" alt="hibernate"></p></blockquote><blockquote><p>① 主配置文件 hibernate.cfg.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">.</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql:///hibernate_db<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>654321<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库方言 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定session与当前线程绑定 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定hibernate操作数据库的隔离级别 1|2|4|8 --- 读未提交 | 读已提交 | 可重复读 | 串行化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.isolation"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将hibernate生成的sql语句格式化，并打印在控制台上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            auto schema export 自动导出表结构. 自动建表，有以下选项，一般常用 update</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">create：自动建表.每次框架运行都会创建新的表.以前表将会被覆盖,表数据会丢失.(开发环境中测试使用)</span></span><br><span class="line"><span class="comment">create-drop：自动建表.每次框架运行结束都会将所有表删除.(开发环境中测试使用)</span></span><br><span class="line"><span class="comment">update：自动生成表，如果已经存在不会再生成.如果表有变动.自动更新表(不会删除任何数据).</span></span><br><span class="line"><span class="comment">validate：校验.不自动生成表.每次启动会校验数据库中表是否正确</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 引入orm元数据  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/paxsh/hbn/bean/Customer.hbm.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/paxsh/hbn/bean/LinkMan.hbm.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>② 实体对象 Customer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long cust_id;</span><br><span class="line">    <span class="keyword">private</span> String cust_name;</span><br><span class="line">    <span class="keyword">private</span> String cust_source;</span><br><span class="line">    <span class="keyword">private</span> String cust_industry;</span><br><span class="line">    <span class="keyword">private</span> String cust_level;</span><br><span class="line">    <span class="keyword">private</span> String cust_linkman;</span><br><span class="line">    <span class="keyword">private</span> String cust_phone;</span><br><span class="line">    <span class="keyword">private</span> String cust_mobile;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>③ orm 元数据 Customer.hbm.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.paxsh.hbn.bean"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.paxsh.hbn.bean.Customer"</span> <span class="attr">table</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">name: 填写主键对应属性名</span></span><br><span class="line"><span class="comment">column(可选): 填写表中的主键列名，列名会默认使用属性名</span></span><br><span class="line"><span class="comment">type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.</span></span><br><span class="line"><span class="comment">每个类型有三种填法: java类型|hibernate类型|数据库类型</span></span><br><span class="line"><span class="comment">not-null(可选):配置该属性(列)是否不能为空. 默认值:false</span></span><br><span class="line"><span class="comment">length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 主键属性的映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cust_id"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">主键生成策略</span></span><br><span class="line"><span class="comment">native：hilo(Orcale的主键策略) + increment(主键自增) + hilo(高低位算法自增)，自动三选一</span></span><br><span class="line"><span class="comment">uuid：使用 uuid 作为主键</span></span><br><span class="line"><span class="comment">assigned：自然主键，hibernate 不会管理主键值，需要自己录入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 普通元素属性映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_name"</span> <span class="attr">column</span>=<span class="string">"cust_name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_industry"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_level"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_linkman"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_phone"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cust_mobile"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>④ 进行测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// configure() 会读取src的 hibernate.cfg.xml 文件</span></span><br><span class="line">        Configuration config = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SessionFactory 用于创建 Session，它负责保存和使用所有配置信息，消耗内存比较大，尽量一个项目中只创建一个 SessionFactory</span></span><br><span class="line">        SessionFactory sessionFactory = config.buildSessionFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Session 表示 hibernate 框架与数据库之间的会话，类似于 jdbc 的 connection 对象 </span></span><br><span class="line">        Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启并获取事务</span></span><br><span class="line">        Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer();</span><br><span class="line">        c.setCust_name(<span class="string">"杰辰"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行保存</span></span><br><span class="line">        session.save(c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交事务commit，回滚事务rollback</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注：需要提前在 mysql 新建一个数据库 hibernate_db ， 因为 hibernate.hbm2ddl.auto 的值为 update ，会自动创建表</p></blockquote><p>通过上面的 hibernate 环境的搭建和实现了小 demo ，我们基本了解了 hibernate 开发流程，接下来对 hibernate 的一些知识点补充</p><h4 id="hibernate的对象状态"><a href="#hibernate的对象状态" class="headerlink" title="hibernate的对象状态"></a>hibernate的对象状态</h4><blockquote><p>对象分为三种状态</p><ol><li>瞬时状态：没有 id ，没有在 session 缓存中</li><li>持久化状态：有 id，在 session 缓存中</li><li>游离 | 托管状态：有 id，没有在 session 缓存中</li></ol></blockquote><blockquote><p>对要同步到数据库中的数据，要将对应的对象转为持久化状态<br><img src="/2018/03/17/hibernate的学习记录/hibernate_3.png" alt="hibernate"></p></blockquote><h4 id="hibernate的一级缓存"><a href="#hibernate的一级缓存" class="headerlink" title="hibernate的一级缓存"></a>hibernate的一级缓存</h4><blockquote><p>缓存的作用是为了提高查询效率</p></blockquote><blockquote><p>hibernate 的缓存原理及如何提交效率</p><ol><li>调用 get 查询，先从缓存中查看是否存在该对象，不存在则发送 sql 到数据库，如果有直接返回缓存中</li><li>当修改了缓存对象，事务提交的时候，hibernate 会对比缓存中对象和快照，如果有变化会同步到数据库中</li><li>减少不必要的修改语句</li></ol></blockquote><h4 id="hibernate的事务"><a href="#hibernate的事务" class="headerlink" title="hibernate的事务"></a>hibernate的事务</h4><blockquote><p>事务的特性：A(原子性) C(一致性) I(隔离性) D(持久性)</p></blockquote><blockquote><p>事务并发的问题： a.脏读 b.不可重复度 c.幻|虚读</p></blockquote><blockquote><p>事务的隔离级别：读未提交(abc)、 读已提交(bc)、 可重复读(c)(mysql默认级别)、 串行化(没有问题)</p></blockquote><blockquote><p>hibernate 如何指定事务隔离级别：见上面 hibernate.cfg.xml 中的配置</p></blockquote><blockquote><p>在项目中如何管理事务</p><ol><li>业务开始之前打开事务，业务执行之后提交事务，执行过程中出现异常，事务回滚.</li><li>在 dao 层操作数据库需要用到 session 对象.在 service 控制事务也是使用 session 对象完成. 我们要确保 dao 层和 service 层使用的使用同一个 session 对象.</li><li>调用 getCurrentSession 方法必须配合主配置中的一段配置<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定session与当前线程绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><p>4.通过 getCurrentSession 方法获得的 session 对象，当事务提交时， session 会自动关闭，不要手动调用 close 关闭.</p></blockquote><h4 id="hibernate的批量查询-单表"><a href="#hibernate的批量查询-单表" class="headerlink" title="hibernate的批量查询(单表)"></a>hibernate的批量查询(单表)</h4><blockquote><p>1.HQL 查询(Hibernate Query Language)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hibernate独家查询语言，属于面向对象的查询语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本查询，查询所有客户信息</span></span><br><span class="line">String hql = <span class="string">"from Customer"</span>;<span class="comment">// 加入 order by cust_id desc 可以排序</span></span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"><span class="comment">// query.uniqueResult(); 接受唯一的查询结果</span></span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询，? 号占位符，查询cust_id为1的客户</span></span><br><span class="line">String hql = <span class="string">"from Customer where cust_id = ?"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="number">1l</span>);</span><br><span class="line">Customer c = query.uniqueResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询，命名占位符，查询cust_id为1的客户</span></span><br><span class="line">String hql = <span class="string">"from Customer where cust_id = :cust_id"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line">query.setParameter(<span class="string">"cust_id"</span>, <span class="number">1l</span>);</span><br><span class="line">Customer c = query.uniqueResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">String hql = <span class="string">"from Customer"</span>;</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"><span class="comment">// 设置分页信息 limit ? , ?</span></span><br><span class="line">query.setFirstResult(<span class="number">1</span>);</span><br><span class="line">query.setMaxResult(<span class="number">6</span>);</span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.Criteria 查询<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hibernate自创的无语句面向对象查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本查询，查询所有客户信息</span></span><br><span class="line">Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询，查询cust_id为1的客户</span></span><br><span class="line">Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">criteria.add(Restrictions.eq(<span class="string">"cust_id"</span>, <span class="number">1l</span>));</span><br><span class="line">Customer c = criteria.uniqueResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line">criteria.setFirstResult(<span class="number">1</span>);</span><br><span class="line">criteria.setMaxResult(<span class="number">6</span>);</span><br><span class="line">List&lt;Customer&gt; list = criteria.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line">Criteria criteria = session.createCriteria(Customer.class);</span><br><span class="line"><span class="comment">// 设置查询的聚合函数</span></span><br><span class="line">criteria.setProjection(Projections.rowCount());</span><br><span class="line">Long count = criteria.uniqueResult();</span><br><span class="line"></span><br><span class="line"><span class="comment">// DetachedCriteria 的使用，当多个条件需要从上一层传入到Dao层时，使用 DetachedCriteria 比较方便</span></span><br><span class="line">DetachedCriteria dc = DetachedCriteria.forClass(Customer.class);</span><br><span class="line"></span><br><span class="line">dc.add(Restrictions.eq(<span class="string">"cust_id"</span>, <span class="number">1l</span>));</span><br><span class="line"></span><br><span class="line">Criteria criteria = dc.getExecutableCriteria(session);</span><br><span class="line"></span><br><span class="line">Customer customer = criteria.uniqueResult();</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.原生 SQL 查询<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本查询，查询所有客户信息</span></span><br><span class="line">String sql = <span class="string">"select * from customer"</span>;</span><br><span class="line"><span class="comment">// 创建sql查询对象</span></span><br><span class="line">SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line">query.addEntity(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件查询，查询cust_id为1的客户</span></span><br><span class="line">String sql = <span class="string">"select * from customer wehere cust_id = ?"</span>;</span><br><span class="line">SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="number">1l</span>);</span><br><span class="line">query.addEntity(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">String sql = <span class="string">"select * from customer limit ?,?"</span>;</span><br><span class="line">SQLQuery query = session.createSQLQuery(sql);</span><br><span class="line">query.setParameter(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">query.setParameter(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">query.addEntity(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = query.list();</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>查询优化：</strong></p><blockquote><p>类级别的查询</p><ol><li>get 方法，调用就立即查询数据库，加载数据，没有策略优化</li><li>load 方法，应用类级别的加载策略<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"table"</span> <span class="attr">table</span>=<span class="string">"Customer"</span> <span class="attr">lazy</span>=<span class="string">"false"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><p>关联级别查询<br>为了提高效率，lazy 和 fetch 默认值即可<br>       lazy 属性：决定是否延迟加载 true(默认值)：延迟加载，false：立即加载，extra：及其懒惰<br>       fetch 属性：决定加载策略 select(默认值)：单表查询加载，join：使用多表查询加载，subselect：使用子查询加载</p></blockquote><blockquote><p>no-session 问题<br>扩大 session 的作用范围，自定义一个 Fileter ，在 doFilter 之前打开 session , doFilter 处理之后关闭 session 即可</p></blockquote><h4 id="hibernate的多表操作"><a href="#hibernate的多表操作" class="headerlink" title="hibernate的多表操作"></a>hibernate的多表操作</h4><p>在本例中，一个客户(Customer)有多个联系人(LinkMan)</p><blockquote><p>1.一对多 | 多对一<br>①我们在 Customer 的一方使用 Set 表示有多个 LinkMan<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long cust_id;</span><br><span class="line">    <span class="keyword">private</span> String cust_name;</span><br><span class="line">    <span class="keyword">private</span> String cust_source;</span><br><span class="line">    <span class="keyword">private</span> String cust_industry;</span><br><span class="line">    <span class="keyword">private</span> String cust_level;</span><br><span class="line">    <span class="keyword">private</span> String cust_linkman;</span><br><span class="line">    <span class="keyword">private</span> String cust_phone;</span><br><span class="line">    <span class="keyword">private</span> String cust_mobile;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用集合表达一对多</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;LinkMan&gt; linkMans = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set/get</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>②我们在 LinkMan 的一方引用 Customer 对象，表示归属 Customer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkMan</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long lkm_id;</span><br><span class="line">    <span class="keyword">private</span> Character lkm_gender;</span><br><span class="line">    <span class="keyword">private</span> String lkm_name;</span><br><span class="line">    <span class="keyword">private</span> String lkm_phone;</span><br><span class="line">    <span class="keyword">private</span> String lkm_email;</span><br><span class="line">    <span class="keyword">private</span> String lkm_qq;</span><br><span class="line">    <span class="keyword">private</span> String lkm_mobile;</span><br><span class="line">    <span class="keyword">private</span> String lkm_memo;</span><br><span class="line">    <span class="keyword">private</span> String lkm_position;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引用对方对象表达 多对一的关系</span></span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/get</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>③ orm 元数据修改<br>Customer.hbm.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.paxsh.hbn.bean"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.paxsh.hbn.bean.Customer"</span> <span class="attr">table</span>=<span class="string">"Customer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            name属性：集合的属性名</span></span><br><span class="line"><span class="comment">            column属性：外键列名</span></span><br><span class="line"><span class="comment">            class属性：相关联对象的类名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"linkMans"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"LinkMan"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>LinkMan.hbm.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.paxsh.hbn.bean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.paxsh.hbn.bean.LinkMan"</span> <span class="attr">table</span>=<span class="string">"LinkMan"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            name属性:引用属性名</span></span><br><span class="line"><span class="comment">            column属性: 外键列名</span></span><br><span class="line"><span class="comment">            class属性: 与我关联的对象完整类名</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 多的一方: 不能放弃维护关系的.外键字段就在多的一方.  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">column</span>=<span class="string">"lkm_cust_id"</span> <span class="attr">class</span>=<span class="string">"com.paxsh.hbn.bean.Customer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>③ 测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCustomer2LinkMan</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Configuration config = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line"></span><br><span class="line">SessionFactory sessionFactory = config.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">Transaction transaction = session.beginTransaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------</span></span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer();</span><br><span class="line">customer.setCust_name(<span class="string">"杰辰"</span>);</span><br><span class="line"></span><br><span class="line">LinkMan linkMan = <span class="keyword">new</span> LinkMan();</span><br><span class="line">linkMan.setLkm_name(<span class="string">"小明"</span>);</span><br><span class="line">LinkMan linkMan2 = <span class="keyword">new</span> LinkMan();</span><br><span class="line">linkMan.setLkm_name(<span class="string">"小张"</span>);</span><br><span class="line"></span><br><span class="line">customer.getLinkMans().add(linkMan);</span><br><span class="line">customer.getLinkMans().add(linkMan2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session.save(customer);</span><br><span class="line">session.save(linkMan);</span><br><span class="line">session.save(linkMan2);</span><br><span class="line"><span class="comment">// ---------</span></span><br><span class="line"></span><br><span class="line">transaction.commit();</span><br><span class="line">session.close();</span><br><span class="line">sessionFactory.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.级联操作<br>简化操作，一般使用 save-update，不建议使用 delete<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">   cascade(级联操作):</span><br><span class="line">   save-update: 级联保存更新</span><br><span class="line">   delete:级联删除</span><br><span class="line">   all:save-update+delete</span><br><span class="line">   级联操作: 简化操作.目的就是为了少些两行代码.</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.关系维护<br>在保存时，两方都会维护外键关系，关系维护两次，冗余了，多余的维护关系语句，显然是客户这一端在维护关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">inverse(配置关系是否维护)：</span><br><span class="line">true：不维护关系</span><br><span class="line">false：维护关系，默认值</span><br><span class="line"></span><br><span class="line">一对多的关系中，一的一方可以放弃维护，多的一方不能放弃维护</span><br><span class="line">多对多的关系中，一定要选择一方放弃维护关系，根据业务逻辑选择放弃一方</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.多对多<br>本例中，一个用户(User) 有多个角色(Role)，一个角色(Role)可以被多个用户(User)使用，在多表关联中，hibernate 会为我们生成一个中间表，这个中间表维护两表的关系</p></blockquote><blockquote><p>①在用户表中，我们使用 Set 表示有多个角色，在角色表中，同样使用 Set 表示多个用户.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long user_id;</span><br><span class="line">    <span class="keyword">private</span> String user_code;</span><br><span class="line">    <span class="keyword">private</span> String user_name;</span><br><span class="line">    <span class="keyword">private</span> String user_password;</span><br><span class="line">    <span class="keyword">private</span> Character user_state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示多对多</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long role_id;</span><br><span class="line">    <span class="keyword">private</span> String role_name;</span><br><span class="line">    <span class="keyword">private</span> String role_memo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表示多对多</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;User&gt; users = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>②配置元数据<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// User.hbm.xml</span><br><span class="line">------------------</span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.paxsh.hbn.bean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"User"</span> <span class="attr">table</span>=<span class="string">"sys_user"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 多对多关系表达 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">name: 集合属性名</span></span><br><span class="line"><span class="comment">table: 配置中间表名</span></span><br><span class="line"><span class="comment">key</span></span><br><span class="line"><span class="comment">    column:外键,别人引用"我"的外键列名</span></span><br><span class="line"><span class="comment">    class: 我与哪个类是多对多关系</span></span><br><span class="line"><span class="comment">column:外键.我引用比人的外键列名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"roles"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"Role"</span> <span class="attr">column</span>=<span class="string">"role_id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Role.hbm.xml</span><br><span class="line">------------------</span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.paxsh.hbn.bean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Role"</span> <span class="attr">table</span>=<span class="string">"sys_role"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用inverse属性</span></span><br><span class="line"><span class="comment">                true: 放弃维护外键关系</span></span><br><span class="line"><span class="comment">                false(默认值):维护关系</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            结论: 在开发中,如果遇到多对多关系.一定要选择一方放弃维护关系.</span></span><br><span class="line"><span class="comment">                 一般谁来放弃要看业务方向. 例如录入员工时,需要为员工指定所属角色.</span></span><br><span class="line"><span class="comment">                 那么业务方向就是由员工维护角色. 角色不需要维护与员工关系.角色放弃维护</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"users"</span> <span class="attr">table</span>=<span class="string">"sys_user_role"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"role_id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"User"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>③测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Many2ManyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存员工以及角色</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Session session = HibernateUtils.openSession();</span><br><span class="line">        Transaction tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------</span></span><br><span class="line">        <span class="comment">//1&gt; 创建两个 User</span></span><br><span class="line">        User u1 = <span class="keyword">new</span> User();</span><br><span class="line">        u1.setUser_name(<span class="string">"杰辰"</span>);</span><br><span class="line"></span><br><span class="line">        User u2 = <span class="keyword">new</span> User();</span><br><span class="line">        u2.setUser_name(<span class="string">"杰辰2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2&gt; 创建两个 Role</span></span><br><span class="line">        Role r1 = <span class="keyword">new</span> Role();</span><br><span class="line">        r1.setRole_name(<span class="string">"小明"</span>);</span><br><span class="line"></span><br><span class="line">        Role r2 = <span class="keyword">new</span> Role();</span><br><span class="line">        r2.setRole_name(<span class="string">"小张"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3&gt; 用户表达关系</span></span><br><span class="line">        u1.getRoles().add(r1);</span><br><span class="line">        u1.getRoles().add(r2);</span><br><span class="line"></span><br><span class="line">        u2.getRoles().add(r1);</span><br><span class="line">        u2.getRoles().add(r2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4&gt; 角色表达关系</span></span><br><span class="line"><span class="comment">//        r1.getUsers().add(u1);  由user进行维护关系，级联操作</span></span><br><span class="line"><span class="comment">//        r1.getUsers().add(u2);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        r2.getUsers().add(u1);</span></span><br><span class="line"><span class="comment">//        r2.getUsers().add(u2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5&gt; 调用Save方法一次保存</span></span><br><span class="line">        session.save(u1);</span><br><span class="line">        session.save(u2);</span><br><span class="line"><span class="comment">//        session.save(r1);</span></span><br><span class="line"><span class="comment">//        session.save(r2);</span></span><br><span class="line">        <span class="comment">//---------</span></span><br><span class="line"></span><br><span class="line">        tx.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      记录hibernate的基本知识点
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://lingchenjie.club/tags/java/"/>
    
      <category term="web框架" scheme="http://lingchenjie.club/tags/web%E6%A1%86%E6%9E%B6/"/>
    
      <category term="hibernate" scheme="http://lingchenjie.club/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis的学习记录</title>
    <link href="http://lingchenjie.club/2018/03/15/Mybatis%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/03/15/Mybatis的学习记录/</id>
    <published>2018-03-15T06:26:57.000Z</published>
    <updated>2018-03-18T11:42:38.404Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>MyBatis 是一个优秀的持久层框架，它对 jdbc 的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身.</p><p>本文案例的 github 地址：<a href="https://github.com/LingChenJie/mybatis_demo" target="_blank" rel="noopener">https://github.com/LingChenJie/mybatis_demo</a></p><blockquote><p>学习之前，我们先准备下数据库，本案例中就使用一个简单的<code>User</code>表，如下所示<br><img src="/2018/03/15/Mybatis的学习记录/jdbc_db.png" alt="jdbc_db"></p></blockquote><h4 id="jdbc编程步骤"><a href="#jdbc编程步骤" class="headerlink" title="jdbc编程步骤"></a>jdbc编程步骤</h4><blockquote><p>在我们学习 mybatis 之前，先回顾下原始的 jdbc 编程步骤</p></blockquote><blockquote><p>1.直接回顾代码，操作过程注释中已经很详细，如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载数据库驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 通过驱动管理类获取数据库链接</span></span><br><span class="line">            connection = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis_db?characterEncoding=utf-8"</span>, <span class="string">"root"</span>, <span class="string">"654321"</span>);</span><br><span class="line">            <span class="comment">// 定义sql语句 ?表示占位符</span></span><br><span class="line">            String sql = <span class="string">"select * from user where username = ?"</span>;</span><br><span class="line">            <span class="comment">// 获取预处理statement</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">// 设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值</span></span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>, <span class="string">"小明"</span>);</span><br><span class="line">            <span class="comment">// 向数据库发出sql执行查询，查询出结果集</span></span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">// 遍历查询结果集</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                System.out.println(resultSet.getString(<span class="string">"id"</span>) + <span class="string">"  "</span> + resultSet.getString(<span class="string">"username"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (preparedStatement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    preparedStatement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1  小明</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>通过上面的代码，我们发现原始 jdbc 书写代码比较繁琐，如果操作数据库变动比较频繁，会变的难以维护</p></blockquote><h4 id="Mybatis架构"><a href="#Mybatis架构" class="headerlink" title="Mybatis架构"></a>Mybatis架构</h4><blockquote><p>在我们学习 Mybatis 之前，先来看下 Mybatis 的整体结构，如下：</p></blockquote><p><img src="/2018/03/15/Mybatis的学习记录/mybatis架构图.png" alt="jdbc_db"></p><blockquote><p>简单介绍下： SqlMapConfig.xml 是是 mybatis 的核心配置文件， mapper.xml 是 sql 的映射文件<br> SqlSessionFactory 为会话工厂， SqlSession 通过会话工厂创建而来， Executor 执行器接口，操作数据库</p></blockquote><h4 id="Mybatis入门-动态代理"><a href="#Mybatis入门-动态代理" class="headerlink" title="Mybatis入门(动态代理)"></a>Mybatis入门(动态代理)</h4><blockquote><p>首先要下载<code>mybatis</code>的<code>jar</code>包，github地址：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></p></blockquote><p><strong>1.搭建mybatis的基本目录</strong></p><blockquote><p>①创建资源文件夹 config ，并在资源文件夹下创建 mybatis 的核心配置文件 SqlMapConfig.xml 以及日志配置文件  log4j.properties </p><p>②在资源文件夹下创建 mapper 文件夹，用于存放映射文件，比如我们当前要操作 User 表，对应创建 UserMapper.xml </p><p>③在 pojo 中创建一个 UserMapper 接口文件，对应于 UserMapper.xml<br><img src="/2018/03/15/Mybatis的学习记录/mybatis_.png" alt="jdbc_db"></p></blockquote><p><strong>2.创建pojo</strong></p><blockquote><p> pojo 类作为 mybatis 进行 sql 映射使用， pojo 类通常与数据库表对应<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>3.创建sql映射文件</strong></p><blockquote><p>定义映射文件 UserMapper.xml，将 UserMapper.xml 放在 config 下 mapper 目录下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.jiechen.pojo.UesrMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.jiechen.pojo.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM `user` WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模糊查询，传入模糊字段需要自己加%% --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByUsername"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.jiechen.pojo.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM `user` WHERE username LIKE #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模糊查询，传入模糊字段即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByUsername2"</span> <span class="attr">parameterType</span>=<span class="string">"string"</span> <span class="attr">resultType</span>=<span class="string">"com.jiechen.pojo.User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM `user` WHERE username LIKE '%$&#123;value&#125;%'</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 保存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.jiechen.pojo.User"</span>&gt;</span></span><br><span class="line">        INSERT INTO `user`</span><br><span class="line">        (username,password) VALUES</span><br><span class="line">        (#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 保存，添加selectKey，可以将mysql自增主键返回 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveUser2"</span> <span class="attr">parameterType</span>=<span class="string">"com.jiechen.pojo.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- selectKey 标签实现主键返回 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keyColumn:主键对应的表中的哪一列 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keyProperty：主键对应的pojo中的哪一个属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- order：设置在执行insert语句前执行查询id的sql，还是在执行insert语句之后执行查询id的sql --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType：设置返回的id的类型 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- LAST_INSERT_ID():是mysql的函数，返回auto_increment自增列新记录id值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">            SELECT LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        INSERT INTO `user`</span><br><span class="line">        (username,password) VALUES</span><br><span class="line">        (#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUserById"</span> <span class="attr">parameterType</span>=<span class="string">"com.jiechen.pojo.User"</span>&gt;</span></span><br><span class="line">        UPDATE `user` SET</span><br><span class="line">        username = #&#123;username&#125; WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 删除 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete from `user` where</span><br><span class="line">        id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>参数解释：</p><ol><li>namespace：命名空间，namespace 与 mapper 接口的类路径相同</li><li>id：statement 的 id 或者叫做 sql 的 id</li><li>parameterType：声明输入参数的类型</li><li>resultType：声明输出结果的类型，如果有多条数据，则分别进行映射，并把对象放到容器List中</li></ol></blockquote><blockquote><p>特殊符号解释：</p><ol><li>#{} 和 ${} 都可以接收简单类型值或 pojo 属性值</li><li>#{}：#{} 表示一个占位符号，自动进行 java 类型和 jdbc 类型转换，传输单个简单类型值，#{} 括号中可以是 value 或其它名称</li><li>${}：${} 表示拼接 sql 串，传入的内容拼接在 sql 中且不进行 jdbc 类型转换，传输单个简单类型值，${} 括号中只能是 value</li></ol></blockquote><p><strong>4.创建Mapper接口</strong></p><blockquote><p>由 Mybatis 框架根据接口定义，创建接口的动态代理对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UesrMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUserByUsername2</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id更新用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUserById</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUserById</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注：</p><ol><li>Mapper 接口方法名和 Mapper.xml 中定义的每个 statement 的 id 相同</li><li>Mapper 接口方法的输入参数类型和 mapper.xml 中定义的每个 sql 的 parameterType 和 resultType 的类型相同</li></ol></blockquote><p><strong>5.在 SqlMapConfig 中加载映射文件</strong></p><blockquote><p>修改SqlMapConfig.xml文件，如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>6.单元测试</strong></p><blockquote><p>进行单元测试，如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 加载SqlMapConfig.xml配置文件</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession，和spring整合后由spring管理</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">this</span>.sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从sqlSession中获取Mapper接口的代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">// 执行查询方法</span></span><br><span class="line">        User user = userMapper.queryUserById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 和spring整合后由spring管理</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserByUsername</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession，和spring整合后由spring管理</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从sqlSession中获取Mapper接口的代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行查询方法</span></span><br><span class="line">        List&lt;User&gt; list = userMapper.queryUserByUsername(<span class="string">"%小%"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 和spring整合后由spring管理</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserByUsername2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession，和spring整合后由spring管理</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从sqlSession中获取Mapper接口的代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行查询方法</span></span><br><span class="line">        List&lt;User&gt; list = userMapper.queryUserByUsername2(<span class="string">"小"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 和spring整合后由spring管理</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSaveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession，和spring整合后由spring管理</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">this</span>.sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从sqlSession中获取Mapper接口的代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建需要保存的User</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"小江"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line">        userMapper.saveUser(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 和spring整合后由spring管理</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession，和spring整合后由spring管理</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">this</span>.sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从sqlSession中获取Mapper接口的代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建需要保存的User</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">3</span>);</span><br><span class="line">        user.setUsername(<span class="string">"小子"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"654321"</span>);</span><br><span class="line"></span><br><span class="line">        userMapper.updateUserById(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 和spring整合后由spring管理</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取sqlSession，和spring整合后由spring管理</span></span><br><span class="line">        SqlSession sqlSession = <span class="keyword">this</span>.sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从sqlSession中获取Mapper接口的代理对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        userMapper.deleteUserById(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 和spring整合后由spring管理</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>至此，我们已经学完了 mybatis 的基本玩法，还是比较直观的，创建 pojo 类，写 Mapper 映射文件，完成 Mapper 接口，在 SqlMapConfig 加载映射文件，调用测试即可。 下面我们将学习的 mybatis 的一些补充点</p><p><strong>1.typeAliases（类型别名）</strong></p><blockquote><p>mybatis支持基本类型的别名(如：string，byte …)<br>自定义别名，在 SqlMapConfig.xml 中加入 typeAliases ，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 单个别名定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"com.jiechen.pojo.User"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（大小写不敏感） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.jiechen.pojo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"其它包"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>2.mappers（映射器）</strong></p><blockquote><p>Mapper配置的几种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;mapper resource=&quot; &quot; /&gt;  # 使用相对于类路径的资源，如：&lt;mapper resource=&quot;sqlmap/User.xml&quot; /&gt;</span><br><span class="line">2. &lt;mapper class=&quot; &quot; /&gt;     # 使用 mapper 接口类路径，如：&lt;mapper class=&quot;com.jiechen.mapper.UserMapper&quot;/&gt;</span><br><span class="line">3. &lt;package name=&quot;&quot;/&gt;       # 注册指定包下的所有mapper接口，如：&lt;package name=&quot;com.jiechen.mapper&quot;/&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注：后两种方法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中</p></blockquote><p><strong>3.resultMap的使用</strong></p><blockquote><p>当 mapper 中的 sql 查询列和 pojo 类的属性不一致的情况下，查询结果就不能映射到 pojo 类中，这时候就需要定义 resultMap ，把 resultMap 将 sql 查询列和 pojo 类属性对应起来<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.jiechen.pojo.OrderMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- resultMap最终还是要将结果映射到pojo上，type就是指定映射到哪一个pojo --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"order"</span> <span class="attr">id</span>=<span class="string">"orderResultMap"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义主键 ,非常重要。如果是多个字段,则定义多个id --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- property：主键在pojo中的属性名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- column：主键在数据库中的列名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"number"</span> <span class="attr">column</span>=<span class="string">"number"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createtime"</span> <span class="attr">column</span>=<span class="string">"createtime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"note"</span> <span class="attr">column</span>=<span class="string">"note"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询所有的订单数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryOrderAll"</span> <span class="attr">resultMap</span>=<span class="string">"orderResultMap"</span>&gt;</span></span><br><span class="line">        SELECT id, user_id,</span><br><span class="line">        number,</span><br><span class="line">        createtime, note FROM `order`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>4.if标签的使用</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据条件查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByWhere"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">SELECT id, username, birthday, sex, address FROM `user`</span><br><span class="line">WHERE 1=1</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null and sex != ''"</span>&gt;</span></span><br><span class="line">AND sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span></span><br><span class="line">AND username LIKE</span><br><span class="line">'%$&#123;username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>5.where标签的使用</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据条件查询用户 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByWhere"</span> <span class="attr">parameterType</span>=<span class="string">"user"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">SELECT id, username, birthday, sex, address FROM `user`</span><br><span class="line"><span class="comment">&lt;!-- where标签可以自动添加where，同时处理sql语句中第一个and关键字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null"</span>&gt;</span></span><br><span class="line">AND sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null and username != ''"</span>&gt;</span></span><br><span class="line">AND username LIKE</span><br><span class="line">'%$&#123;username&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>6.foreach标签的使用</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据ids查询用户，ids可以是数组或List&lt;Interger&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByIds"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">SELECT * FROM `user`</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- foreach标签，进行遍历 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- collection：遍历的集合，这里是QueryVo的ids属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item：遍历的项目，可以随便写，，但是和后面的#&#123;&#125;里面要一致 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- open：在前面添加的sql片段 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- close：在结尾处添加的sql片段 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- separator：指定遍历的元素之间使用的分隔符 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 拼装结果如：SELECT * FROM user WHERE id IN (1,10,24) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"id IN ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">#&#123;item&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>以上就是 mybatis 的一些经常使用的标签，需要好好记一下，接下来我们继续学习关联查询</p><blockquote><p>学习之前，我们还需要创建一个表 order ,数据自己随意添加，如下<br><img src="/2018/03/15/Mybatis的学习记录/jdbc_db2.png" alt="jdbc_db"></p></blockquote><p><strong>1.一对一查询</strong></p><blockquote><p>需求：查询所有订单信息，关联查询下单用户信息</p></blockquote><blockquote><p>方式1：改造pojo类，OrderUser 类继承 Order 类后 OrderUser 类包括了 Order 类的所有字段，只需要定义用户的信息字段即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建 OrderUser，继承 Order</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderUser</span> <span class="keyword">extends</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在 OrderMapper 映射文件中加入</span></span><br><span class="line">&lt;!-- 查询订单，同时包含用户数据 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"queryOrderUser"</span> resultType=<span class="string">"orderUser"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line">o.id,</span><br><span class="line">o.user_id userId,</span><br><span class="line">o.number,</span><br><span class="line">o.createtime,</span><br><span class="line">o.note,</span><br><span class="line">u.username,</span><br><span class="line">u.password</span><br><span class="line">FROM</span><br><span class="line">  `order` o</span><br><span class="line">LEFT JOIN `user` u ON o.user_id = u.id</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.在 OrderMapper 接口中加入</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一对一关联，查询订单信息包含用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;OrderUser&gt; <span class="title">queryOrderUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>方式2：使用resultMap，在Order类中加入User属性，user属性中用于存储关联查询的用户信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建 OrderUser，继承 Order，加入User属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderUser2</span> <span class="keyword">extends</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在 OrderMapper 映射文件中加入</span></span><br><span class="line">&lt;!-- 查询订单，同时包含用户数据 --&gt;</span><br><span class="line">&lt;resultMap type=<span class="string">"orderUser2"</span> id=<span class="string">"orderUserResultMap"</span>&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"userId"</span> column=<span class="string">"user_id"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"number"</span> column=<span class="string">"number"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"createtime"</span> column=<span class="string">"createtime"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"note"</span> column=<span class="string">"note"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- association ：配置一对一属性 --&gt;</span><br><span class="line">&lt;!-- property:order里面的User属性名 --&gt;</span><br><span class="line">&lt;!-- javaType:属性类型 --&gt;</span><br><span class="line">&lt;association property=<span class="string">"user"</span> javaType=<span class="string">"user"</span>&gt;</span><br><span class="line">&lt;!-- id:声明主键，表示user_id是关联查询对象的唯一标识--&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"user_id"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"username"</span> column=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"password"</span> column=<span class="string">"password"</span> /&gt;</span><br><span class="line">&lt;/association&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 一对一关联，查询订单，订单内部包含用户属性 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"queryOrderUserResultMap"</span> resultMap=<span class="string">"orderUserResultMap"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line">o.id,</span><br><span class="line">o.user_id,</span><br><span class="line">o.number,</span><br><span class="line">o.createtime,</span><br><span class="line">o.note,</span><br><span class="line">u.username,</span><br><span class="line">u.password</span><br><span class="line">FROM</span><br><span class="line">  `order` o</span><br><span class="line">LEFT JOIN `user` u ON o.user_id = u.id</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.在 OrderMapper 接口中加入</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一对一关联，订单内部包含属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;OrderUser2&gt; <span class="title">queryOrderUserResultMap</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>2.一对多查询</strong></p><blockquote><p>需求：查询所有用户信息及用户关联的订单信息，用户信息和订单信息为一对多关系<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建 UserOrder，继承 User，加入 List&lt;Order&gt; 属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOrder</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orders;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set/get</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.在UserMapper.xml添加sql，如下</span></span><br><span class="line">&lt;resultMap type=<span class="string">"userOrder"</span> id=<span class="string">"userOrderResultMap"</span>&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"id"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"username"</span> column=<span class="string">"username"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"password"</span> column=<span class="string">"password"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置一对多的关系 --&gt;</span><br><span class="line">&lt;collection property=<span class="string">"orders"</span> javaType=<span class="string">"list"</span> ofType=<span class="string">"order"</span>&gt;</span><br><span class="line">&lt;!-- 配置主键，是关联Order的唯一标识 --&gt;</span><br><span class="line">&lt;id property=<span class="string">"id"</span> column=<span class="string">"oid"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"number"</span> column=<span class="string">"number"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"createtime"</span> column=<span class="string">"createtime"</span> /&gt;</span><br><span class="line">&lt;result property=<span class="string">"note"</span> column=<span class="string">"note"</span> /&gt;</span><br><span class="line">&lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 一对多关联，查询订单同时查询该用户下的订单 --&gt;</span><br><span class="line">&lt;select id=<span class="string">"queryUserOrder"</span> resultMap=<span class="string">"userOrderResultMap"</span>&gt;</span><br><span class="line">SELECT</span><br><span class="line">u.id,</span><br><span class="line">u.username,</span><br><span class="line">u.password,</span><br><span class="line">o.id oid,</span><br><span class="line">o.number,</span><br><span class="line">o.createtime,</span><br><span class="line">o.note</span><br><span class="line">FROM</span><br><span class="line">  `user` u</span><br><span class="line">LEFT JOIN `order` o ON u.id = o.user_id</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.在 UserMapper 接口中加入</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一对多关联，查询用户，用户内部包含该用户的订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;UserOrder&gt; <span class="title">queryUserOrder</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p><strong>1.Mybatis对比jdbc编程的优势</strong></p><blockquote><ol><li>在 SqlMapConfig.xml 中配置数据连接池，使用连接池管理数据库链接</li><li>将 Sql 语句配置在 XXXXmapper.xml 文件中与 java 代码分离，方便维护 sql 语句</li><li>传参方便，Mybatis 自动将 java 对象映射至 sql 语句，通过 statement 中的 parameterType 定义输入参数的类型</li><li>对结果集解析方便，Mybatis 自动将 sql 执行结果映射至 java 对象，通过 statement 中的 resultType 定义输出结果的类型</li></ol></blockquote><p><strong>2.mybatis与hibernate不同</strong></p><blockquote><ol><li>Mybatis 学习门槛低，简单易学，程序员直接编写原生态 sql，可严格控制 sql 执行性能，灵活度高</li><li>Hibernate 对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用 hibernate 开发可以节省很多代码，提高效率。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      记录Mybatis的基本知识点
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="java" scheme="http://lingchenjie.club/tags/java/"/>
    
      <category term="web框架" scheme="http://lingchenjie.club/tags/web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit上传下载进度回调</title>
    <link href="http://lingchenjie.club/2018/03/12/Retrofit%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E8%BF%9B%E5%BA%A6%E5%9B%9E%E8%B0%83/"/>
    <id>http://lingchenjie.club/2018/03/12/Retrofit上传下载进度回调/</id>
    <published>2018-03-12T08:11:14.000Z</published>
    <updated>2018-03-18T11:42:59.036Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>在应用中对文件的上传和下载的场景还是比较普遍的，本篇文件带领大家学习如何进行上传下载，并对上传和下载进度进行回调，确保在上传和下载的过程中能够看到进度，缓解用户焦急等待的心情。</p><p>我们知道Retrofit内部使用的是okhttp进行网络交互，学习Retrofit的文件上传和下载之前，我们先来了解下如何实现okhttp的文件上传和下载</p><h4 id="1-okHttp实现文件上传下载的进度回调"><a href="#1-okHttp实现文件上传下载的进度回调" class="headerlink" title="1.okHttp实现文件上传下载的进度回调"></a>1.okHttp实现文件上传下载的进度回调</h4><blockquote><p>要实现进度的监听，需要使用到OkHttp的依赖包Okio里的两个类，一个是Source，一个是Sink，有兴趣的朋友可以了解下<a href="http://blog.csdn.net/sbsujjbcy/article/details/50523623" target="_blank" rel="noopener">Android 善用Okio简化处理I/O操作</a></p></blockquote><blockquote><p>1.OkHttp把请求和响应分别封装成了RequestBody和ResponseBody，对下载进度监听的实现，就要对ResponseBody做出封装，从而获取数据处理的进度，具体看下面代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对ResponseBody进行封装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProgressResponseBody</span> <span class="keyword">extends</span> <span class="title">ResponseBody</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResponseBody responseBody;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProgressListener progressListener;</span><br><span class="line">    <span class="keyword">private</span> BufferedSource bufferedSource;</span><br><span class="line"></span><br><span class="line">    ProgressResponseBody(ResponseBody responseBody, ProgressListener progressListener) &#123;</span><br><span class="line"><span class="keyword">this</span>.responseBody = responseBody;</span><br><span class="line"><span class="keyword">this</span>.progressListener = progressListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> responseBody.contentType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> responseBody.contentLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> BufferedSource <span class="title">source</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bufferedSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">bufferedSource = Okio.buffer(source(responseBody.source()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bufferedSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Source <span class="title">source</span><span class="params">(Source source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ForwardingSource(source) &#123;</span><br><span class="line"><span class="keyword">long</span> totalBytesRead = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">(Buffer sink, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">long</span> bytesRead = <span class="keyword">super</span>.read(sink, byteCount);</span><br><span class="line"></span><br><span class="line"><span class="comment">// read() returns the number of bytes read, or -1 if this source is exhausted.</span></span><br><span class="line">totalBytesRead += bytesRead != -<span class="number">1</span> ? bytesRead : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">progressListener.update(totalBytesRead, responseBody.contentLength(), bytesRead == -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> bytesRead;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 回调接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ProgressListener</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> bytesRead, <span class="keyword">long</span> contentLength, <span class="keyword">boolean</span> done)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载的拦截器，单独抽取出来</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProgressListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DownloadInterceptor</span><span class="params">(ProgressListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Response originalResponse = chain.proceed(chain.request());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> originalResponse.newBuilder()</span><br><span class="line">                .body(<span class="keyword">new</span> ProgressResponseBody(originalResponse.body(), listener))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行调用，在构建OkHttpClient添加拦截器</span></span><br><span class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">.addNetworkInterceptor(<span class="keyword">new</span> DownloadInterceptor(listener))</span><br><span class="line">.build();</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.同理，我们上传文件监视进度，封装RequestBody即可，下面看代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装RequestBody</span></span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">ProgressRequestBody</span> <span class="keyword">extends</span> <span class="title">RequestBody</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RequestBody requestBody;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProgressRequestListener progressListener;</span><br><span class="line">    <span class="keyword">private</span> BufferedSink bufferedSink;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressRequestBody</span><span class="params">(RequestBody requestBody, ProgressRequestListener progressListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.requestBody = requestBody;</span><br><span class="line">        <span class="keyword">this</span>.progressListener = progressListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MediaType <span class="title">contentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> requestBody.contentType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> requestBody.contentLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeTo</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bufferedSink == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bufferedSink = Okio.buffer(sink(sink));</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        requestBody.writeTo(bufferedSink);</span><br><span class="line">        bufferedSink.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Sink <span class="title">sink</span><span class="params">(Sink sink)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForwardingSink(sink) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> bytesWritten = <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">long</span> contentLength = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(Buffer source, <span class="keyword">long</span> byteCount)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.write(source, byteCount);</span><br><span class="line">                <span class="keyword">if</span> (contentLength == <span class="number">0</span>) &#123;</span><br><span class="line">                    contentLength = contentLength();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bytesWritten += byteCount;</span><br><span class="line">                progressListener.onRequestProgress(bytesWritten, contentLength, bytesWritten == contentLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口回调</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ProgressRequestListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onRequestProgress</span><span class="params">(<span class="keyword">long</span> bytesWritten, <span class="keyword">long</span> contentLength, <span class="keyword">boolean</span> done)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行调用</span></span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"..."</span>);</span><br><span class="line"></span><br><span class="line">OkHttpClient okHttpClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">Request.Builder builder = <span class="keyword">new</span> Request.Builder();</span><br><span class="line">builder.url(url);</span><br><span class="line"></span><br><span class="line">MultipartBody.Builder bodyBuilder = <span class="keyword">new</span> MultipartBody.Builder();</span><br><span class="line">bodyBuilder.addFormDataPart(<span class="string">"file"</span>, file.getName(), RequestBody.create(<span class="keyword">null</span>, file));</span><br><span class="line">MultipartBody build = bodyBuilder.build();</span><br><span class="line"></span><br><span class="line">RequestBody requestBody = <span class="keyword">new</span> ProgressRequestBody(build, progressListener);<span class="comment">// 进行封装，二次处理</span></span><br><span class="line">okHttpClient.newCall(builder.build());</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>通过上面的代码，我们基本可以根据OkHttp编写一个自己的上传下载工具类了，至于如何编写应该是很容易的事情了，大家动手试试，在这里为了文章不啰嗦就不在赘述了</p></blockquote><h4 id="Retrofit实现文件上传和下载的进度回调"><a href="#Retrofit实现文件上传和下载的进度回调" class="headerlink" title="Retrofit实现文件上传和下载的进度回调"></a>Retrofit实现文件上传和下载的进度回调</h4><blockquote><p>通过前面okHttp的上传和下载的学习，Retrofit又是基于okHttp的，学起起来就很轻松了，无非加入了RxJava有点不一样，下面就开始进入征程</p></blockquote><blockquote><p>1.Retrofit+RxJava实现下载<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpDownService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Streaming</span><span class="comment">/*大文件需要加入这个判断，防止下载过程中写入到内存中*/</span></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="function">Observable&lt;ResponseBody&gt; <span class="title">download</span><span class="params">(@Url String url)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.省略 ProgressResponseBody 和 ProgressListener 以及 DownloadInterceptor，见上面OkHttp的下载</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.进行调用</span></span><br><span class="line">DownloadInterceptor interceptor = <span class="keyword">new</span> DownloadInterceptor(subscriber);<span class="comment">// subscriber实现了ProgressListener</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动创建一个OkHttpClient并设置超时时间</span></span><br><span class="line">OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line">builder.connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">builder.addInterceptor(interceptor);</span><br><span class="line"></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                    .client(builder.build())</span><br><span class="line">                    .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                    .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">                    .baseUrl(BASE_URL)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">AppService appService = retrofit.create(AppService.class);</span><br><span class="line">appService.download(<span class="string">"..."</span>);<span class="comment">// 下载地址</span></span><br><span class="line">  .subscribeOn(Schedulers.io())</span><br><span class="line">          .unsubscribeOn(Schedulers.io())</span><br><span class="line">  <span class="comment">/*读取下载写入文件 DownInfo是自定义的下载实体类*/</span></span><br><span class="line">  .map(<span class="keyword">new</span> Action&lt;ResponseBody, DownInfo&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DownInfo <span class="title">call</span><span class="params">(ResponseBody responseBody)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 这里进行文件的写入</span></span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">  .subscribe(subscriber);<span class="comment">// 这里的自定义SubScriber实现ProgressListener，进行下载的回调</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>使用Retrofit+RxJava进行下载，反而感觉有点画蛇添足，不过对于喜欢RxJava可以研究研究</p></blockquote><blockquote><p>2.使用Retrofit+RxJava实现文件上传<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Multipart</span></span><br><span class="line">    <span class="meta">@POST</span>(<span class="string">"upload"</span>)</span><br><span class="line">    Observable&lt;BaseResultEntity&lt;UploadResult&gt;&gt; upload(<span class="meta">@Part</span>(<span class="string">"des"</span>) RequestBody des, <span class="meta">@Part</span> MultipartBody.Part file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.省略 ProgressRequestBody 和 ProgressRequestListener，见上面OkHttp的上传文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建RequestBody对象</span></span><br><span class="line">File file=<span class="keyword">new</span> File(<span class="string">"..."</span>);</span><br><span class="line">RequestBody requestBody = RequestBody.create(MediaType.parse(<span class="string">"image/jpeg"</span>),file);</span><br><span class="line">ProgressRequestBody progressRequestBody = <span class="keyword">new</span> ProgressRequestBody(requestBody, progressRequestListener)</span><br><span class="line">MultipartBody.Part part = MultipartBody.Part.createFormData(<span class="string">"file_name"</span>, file.getName(), progressRequestBody);</span><br><span class="line"></span><br><span class="line">AppService service = retrofit.create(AppService.class);</span><br><span class="line">RequestBody des = RequestBody.create(MediaType.parse(<span class="string">"text/plain"</span>), <span class="string">"这是描述"</span>);</span><br><span class="line">service.upload(des, part);</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      记录Retrofit上传下载进度回调
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="android" scheme="http://lingchenjie.club/tags/android/"/>
    
      <category term="框架" scheme="http://lingchenjie.club/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Retrofit" scheme="http://lingchenjie.club/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>android6.0运行时权限</title>
    <link href="http://lingchenjie.club/2018/03/12/android6.0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/"/>
    <id>http://lingchenjie.club/2018/03/12/android6.0运行时权限/</id>
    <published>2018-03-12T08:11:14.000Z</published>
    <updated>2018-03-18T11:41:21.678Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>在android6.0开始，为了让用户清楚应用持有什么权限，就引入了运行时权限，所有危险的权限都需要动态申请，用户同意后，才能使用</p><h4 id="危险权限组"><a href="#危险权限组" class="headerlink" title="危险权限组"></a>危险权限组</h4><blockquote><p>说明：同一组中的某个权限经用户授权过，再次申请同组其他危险权限，系统会直接授权通过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CONTACTS #联系人相关</span><br><span class="line">PHONE #电话相关</span><br><span class="line">CALENDAR #日历相关</span><br><span class="line"></span><br><span class="line">CAMERA #相机相关</span><br><span class="line">SENSORS #震动相关</span><br><span class="line">LOCATION #位置相关</span><br><span class="line"></span><br><span class="line">STORAGE #储存卡相关</span><br><span class="line">MICROPHONE #麦克风相关</span><br><span class="line">SMS #短信相关</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="动态权限申请"><a href="#动态权限申请" class="headerlink" title="动态权限申请"></a>动态权限申请</h4><blockquote><p>比如我们进行拍照，就需要申请权限，下面我们根据代码来学习如何进行权限申请，清单文件中不要忘记加入该权限<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CAMERA_CODE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用拍照</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take_photo</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        requestPermission(Manifest.permission.CAMERA, REQUEST_CAMERA_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestPermission</span><span class="params">(String permission, <span class="keyword">int</span> requestCode)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否进行过授权</span></span><br><span class="line">        <span class="keyword">if</span> (!isGranted(permission)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 之前请求过授权，用户拒绝了权限申请，再次调用shouldShowRequestPermissionRationale会返回true</span></span><br><span class="line">            <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>, permission)) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"上次请求授权被拒绝"</span>);</span><br><span class="line"><span class="comment">// 这里应该 提示用户为什么要授权</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 进行权限申请</span></span><br><span class="line">                ActivityCompat.requestPermissions(<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;permission&#125;, requestCode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            Log.d(TAG, <span class="string">"已经授权通过了"</span>);</span><br><span class="line"><span class="comment">// 直接执行相应操作了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限申请的结果回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CAMERA_CODE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"授权通过"</span>);</span><br><span class="line">                <span class="comment">// 执行相应操作</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 授权拒绝</span></span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"权限拒绝，将不能调用相机"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGranted</span><span class="params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !isMarshmallow() || isGranted_(permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断该权限是否经过授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isGranted_</span><span class="params">(String permission)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> checkSelfPermission = ActivityCompat.checkSelfPermission(<span class="keyword">this</span>, permission);</span><br><span class="line">        <span class="keyword">return</span> checkSelfPermission == PackageManager.PERMISSION_GRANTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是android6.0以上</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isMarshmallow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>动态权限申请还是挺简单的，不过还是有点麻烦，下面我们学习下使用<code>RxPermission</code>开源库</p></blockquote><h4 id="RxPermission使用"><a href="#RxPermission使用" class="headerlink" title="RxPermission使用"></a>RxPermission使用</h4><blockquote><p> github地址：<a href="https://github.com/tbruyelle/RxPermissions" target="_blank" rel="noopener">https://github.com/tbruyelle/RxPermissions</a></p></blockquote><blockquote><p>1.引入依赖，<code>minSdkVersion</code> 需要 &gt;= 11，在<code>build.gradle</code>加入以下<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">...</span><br><span class="line">        exclude <span class="string">'META-INF/rxjava.properties'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile <span class="string">'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'</span></span><br><span class="line">    compile <span class="string">'com.jakewharton.rxbinding:rxbinding:0.4.0'</span></span><br><span class="line">    compile <span class="string">'com.github.akarnokd:rxjava2-interop:0.8.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.拍照权限申请(获取单一权限)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">RxPermissions rxPermissions = <span class="keyword">new</span> RxPermissions(<span class="keyword">this</span>);</span><br><span class="line">rxPermissions</span><br><span class="line">.request(Manifest.permission.CAMERA)</span><br><span class="line">.subscribe(<span class="keyword">new</span> Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean granted)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (granted) &#123; <span class="comment">// 在android 6.0之前会默认返回true</span></span><br><span class="line"><span class="comment">// 已经获取权限</span></span><br><span class="line">Toast.makeText(DemoActivity.<span class="keyword">this</span>, <span class="string">"获取拍照权限成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 未获取权限</span></span><br><span class="line">Toast.makeText(DemoActivity.<span class="keyword">this</span>, <span class="string">"获取拍照权限失败"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.拍照权限和读取电话状态权限申请(获取多个权限)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">RxPermissions rxPermissions = <span class="keyword">new</span> RxPermissions(<span class="keyword">this</span>);</span><br><span class="line">rxPermissions</span><br><span class="line">.request(Manifest.permission.CAMERA,</span><br><span class="line">Manifest.permission.READ_PHONE_STATE)</span><br><span class="line">.subscribe(<span class="keyword">new</span> Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean granted)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (granted) &#123;<span class="comment">// 在android 6.0之前会默认返回true</span></span><br><span class="line"><span class="comment">// All requested permissions are granted</span></span><br><span class="line">Toast.makeText(DemoActivity.<span class="keyword">this</span>, <span class="string">"权限获取成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// At least one permission is denied</span></span><br><span class="line">Toast.makeText(DemoActivity.<span class="keyword">this</span>, <span class="string">"至少有一项权限没有获取成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.拍照权限和读取电话状态权限申请(获取多个权限)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">RxPermissions rxPermissions = <span class="keyword">new</span> RxPermissions(<span class="keyword">this</span>);</span><br><span class="line">rxPermissions</span><br><span class="line">.requestEach(Manifest.permission.CAMERA,</span><br><span class="line">Manifest.permission.READ_PHONE_STATE)</span><br><span class="line">.subscribe(<span class="keyword">new</span> Consumer&lt;Permission&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Permission permission)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (permission.granted) &#123;<span class="comment">// 在android 6.0之前会默认返回true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `permission.name` is granted !</span></span><br><span class="line">Toast.makeText(DemoActivity.<span class="keyword">this</span>, permission.name + <span class="string">"权限获取成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (permission.shouldShowRequestPermissionRationale) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Denied permission without ask never again</span></span><br><span class="line">Toast.makeText(DemoActivity.<span class="keyword">this</span>, permission.name + <span class="string">"权限被拒绝"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Denied permission with ask never again</span></span><br><span class="line"><span class="comment">// Need to go to the settings</span></span><br><span class="line">Toast.makeText(DemoActivity.<span class="keyword">this</span>, <span class="string">"权限拒绝"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>总结：使用了<code>RxPermission</code>来控制权限，是不是变的简单多了，申请权限和回调在一个调用链中，更加清晰</p></blockquote>]]></content>
    
    <summary type="html">
    
      记录android6.0运行时权限
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="android" scheme="http://lingchenjie.club/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit配合RxJava使用</title>
    <link href="http://lingchenjie.club/2018/03/10/Retrofit%E9%85%8D%E5%90%88RxJava%E4%BD%BF%E7%94%A8/"/>
    <id>http://lingchenjie.club/2018/03/10/Retrofit配合RxJava使用/</id>
    <published>2018-03-10T08:21:11.000Z</published>
    <updated>2018-03-18T11:42:49.631Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>本文记录下Retrofit和RxJava的配合使用，毕竟二者配合是android中网络请求的最佳使用。</p><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><blockquote><p>在app.build中添加以下依赖<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrofit</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></span><br><span class="line">compile <span class="string">'com.squareup.okhttp3:logging-interceptor:3.6.0'</span></span><br><span class="line"><span class="comment">// 与rxjava配合使用需导入以下的库</span></span><br><span class="line">compile <span class="string">'io.reactivex:rxjava:1.1.0'</span></span><br><span class="line">    compile <span class="string">'io.reactivex:rxandroid:1.1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="2-如何使用"><a href="#2-如何使用" class="headerlink" title="2.如何使用"></a>2.如何使用</h4><blockquote><p>通过以下代码，就可以很清晰的了解到两者是如何配合使用的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义网络请求接口，其中方法的返回是Observable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"book/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Observable&lt;Book&gt; <span class="title">getBook</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建Retrofit对象</span></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">.baseUrl(BaseUrl)</span><br><span class="line">.addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">.addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.获取接口，调用方法进行网络请求</span></span><br><span class="line">AppService appService = retrofit.create(AppService.class);</span><br><span class="line">appService.getBook(<span class="number">10</span>)</span><br><span class="line">.subscribeOn(Schedulers.io())</span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">.subscribe(<span class="keyword">new</span> Subscriber&lt;Book&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>两者的配合是不是非常完美呢，我们可以非常清楚的了解代码的业务逻辑，而且没有了线程之间的反复的切换</p></blockquote><h4 id="3-简单的封装下网络请求"><a href="#3-简单的封装下网络请求" class="headerlink" title="3.简单的封装下网络请求"></a>3.简单的封装下网络请求</h4><blockquote><p>基本上我们每一个应用都需要离不开网络请求，倘若每次调用网络都要写一大推代码，就会显得有些凌乱了，所以简单的封装下还是很有必要的，下面直接看代码</p></blockquote><blockquote><p>1.创建自己的网络请求对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">""</span>;<span class="comment">// 网络请求地址</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Retrofit retrofit;</span><br><span class="line">    <span class="keyword">private</span> AppService appService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HttpMethods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建okHttp，自己定义超时时间</span></span><br><span class="line">        OkHttpClient.Builder httpClientBuilder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line">httpClientBuilder.writeTimeOut(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        httpClientBuilder.connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .client(httpClientBuilder.build())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">                .baseUrl(BASE_URL)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        appService = retrofit.create(MovieService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在访问HttpClient时创建单例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpClient INSTANCE = <span class="keyword">new</span> HttpClient();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取单例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpMethods <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 例如：获取图书信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getTopMovie</span><span class="params">(Subscriber&lt;Book&gt; subscriber, <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        appService.getBook(id)</span><br><span class="line">.map(<span class="keyword">new</span> HttpResultFunc&lt;Book&gt;())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .unsubscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(subscriber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据返回的resultCode，过滤不存在的数据(resultCode如果不等于0，说明获取数据失败)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpResultFunc</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Func1</span>&lt;<span class="title">HttpResult</span>&lt;<span class="title">T</span>&gt;, <span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">(HttpResult&lt;T&gt; httpResult)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (httpResult.getResultCode() != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 此处抛出异常，map调用该对象时，结果会走到onError方法中</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(httpResult.getResultCode());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> httpResult.getData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.创建统一的HttpResult，根据服务端返回数据进行改写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resultCode;</span><br><span class="line">    <span class="keyword">private</span> String resultMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get/set...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.封装自己的结果回调接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpOnNextListener</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功后回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败或者错误方法</span></span><br><span class="line"><span class="comment">     * 主动调用，更加灵活</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消回調</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.封装ProgressSubscriber，根据数据处理控制ProgressDialog的显示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgressSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> showProgress = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SoftReference&lt;HttpOnNextListener&gt; httpOnNextListener;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SoftReference&lt;RxAppCompatActivity&gt; activity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ProgressDialog pd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProgressSubscriber</span><span class="params">(HttpOnNextListener httpOnNextListener, Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.api = api;</span><br><span class="line">        <span class="keyword">this</span>.httpOnNextListener = httpOnNextListener;</span><br><span class="line">        <span class="keyword">this</span>.activity = <span class="keyword">new</span> SoftReference&lt;&gt;(activity);</span><br><span class="line">initProgressDialog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        showProgressDialog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dismissProgressDialog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        dismissProgressDialog();</span><br><span class="line">        <span class="keyword">if</span> (mSubscriberOnNextListener.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSubscriberOnNextListener.get().onError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSubscriberOnNextListener.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mSubscriberOnNextListener.get().onNext(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化加载框</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initProgressDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Context context = activity.get();</span><br><span class="line">        <span class="keyword">if</span> (pd == <span class="keyword">null</span> &amp;&amp; context != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pd = <span class="keyword">new</span> ProgressDialog(context);</span><br><span class="line">            </span><br><span class="line">pd.setOnCancelListener(<span class="keyword">new</span> DialogInterface.OnCancelListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">(DialogInterface dialogInterface)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mSubscriberOnNextListener.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">mSubscriberOnNextListener.get().onCancel();</span><br><span class="line">&#125;</span><br><span class="line">onCancelProgress();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示加载框</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showProgressDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Context context = mActivity.get();</span><br><span class="line">        <span class="keyword">if</span> (pd == <span class="keyword">null</span> || context == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (!pd.isShowing()) &#123;</span><br><span class="line">            pd.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 隐藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dismissProgressDialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isShowProgress()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (pd != <span class="keyword">null</span> &amp;&amp; pd.isShowing()) &#123;</span><br><span class="line">            pd.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消ProgressDialog的时候，取消对observable的订阅，同时也取消了http请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancelProgress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isUnsubscribed()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>5.在activity中调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HttpOnNextListener listener = <span class="keyword">new</span> HttpOnNextListener&lt;Book&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line">HttpClient.getInstance().getBook(<span class="keyword">new</span> ProgressSubscriber(listener, activity), <span class="number">10</span>);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>相信到这里，你已经清楚了<code>Retrofit</code>如何配合<code>RxJava</code>使用了吧，你可以根据自己项目来进行封装的调整，没有最好的封装，只有最适合的</p></blockquote>]]></content>
    
    <summary type="html">
    
      记录Retrofit结合RxJava的使用
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="android" scheme="http://lingchenjie.club/tags/android/"/>
    
      <category term="框架" scheme="http://lingchenjie.club/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="RxJava" scheme="http://lingchenjie.club/tags/RxJava/"/>
    
      <category term="Retrofit" scheme="http://lingchenjie.club/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit学习记录</title>
    <link href="http://lingchenjie.club/2018/03/06/Retrofit%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/03/06/Retrofit学习记录/</id>
    <published>2018-03-06T02:33:53.000Z</published>
    <updated>2018-03-18T11:43:08.455Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>Retrofit 是一个 RESTful 的 Http 网络请求框架的封装，它的底层使用的 OkHttp</p><blockquote><p>什么是<code>RESTful</code>？<br>通俗的讲就是：看<code>Url</code>就知道要什么，看<code>http method</code>就知道干什么，看<code>http status code</code>就知道结果如何</p></blockquote><h4 id="1-添加Retrofit库的依赖"><a href="#1-添加Retrofit库的依赖" class="headerlink" title="1.添加Retrofit库的依赖"></a>1.添加Retrofit库的依赖</h4><blockquote><p>在app的build.gradle中添加<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// Retrofit库</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:retrofit:2.3.0'</span></span><br><span class="line"><span class="comment">// okhttp库</span></span><br><span class="line">compile <span class="string">'com.squareup.okhttp3:okhttp:3.10.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="2-Retrofit实例"><a href="#2-Retrofit实例" class="headerlink" title="2.Retrofit实例"></a>2.Retrofit实例</h4><blockquote><p>通过一个小实例，我们就可以清楚<code>Retrofit</code>是如何使用的，下面看代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建Retrofit对象</span></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.定义接口，在接口中定义要请求的方法，比如说根据id获取图书信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"book/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">getBook</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.进行调用</span></span><br><span class="line">AppService service = retrofit.create(AppService.class);</span><br><span class="line">Call&lt;ResponseBody&gt; call = service.getBook(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.结果回调</span></span><br><span class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;ResponseBody&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 回调在主线程</span></span><br><span class="line">        Log.d(TAG, response.body().string());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这样看来，是不是挺简单的，确实是挺简单的，<code>Retrofit</code>帮助我们做了那么多事，用起来还是挺不错的。<br>注意：<code>Retrofit</code> 的<code>bauseUrl</code>必须要以<code>/</code>结束</p></blockquote><h4 id="3-Retrofit注解"><a href="#3-Retrofit注解" class="headerlink" title="3.Retrofit注解"></a>3.Retrofit注解</h4><blockquote><p>1.请求方式的注解<br>@GET、@POST、@PUT、@DELETE、@PATCH、@HEAD、@OPTION、@HTTP<br>其中@HTTP可以替换其他的方法注解，它拥有三个属性：method、path、hasBody<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * method 表示请求的方法，区分大小写</span></span><br><span class="line"><span class="comment">     * path表示路径</span></span><br><span class="line"><span class="comment">     * hasBody表示是否有请求体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@HTTP</span>(method = <span class="string">"GET"</span>, path = <span class="string">"blog/&#123;id&#125;"</span>, hasBody = <span class="keyword">false</span>)</span><br><span class="line">    <span class="function">Call&lt;ResponseBody&gt; <span class="title">getBook</span><span class="params">(@Path(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.请求头注解<br>@Headers:用于添加固定请求头，可以同时添加多个。<br>@Header:作为方法的参数传入，用于添加不固定值的Header<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 固定请求头</span></span><br><span class="line"><span class="meta">@Headers</span>(<span class="string">"Authorization: authorization"</span>)</span><br><span class="line"><span class="meta">@GET</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 不固定值的Header</span></span></span><br><span class="line"><span class="function">@<span class="title">GET</span><span class="params">(<span class="string">"user"</span>)</span></span></span><br><span class="line"><span class="function">Call&lt;User&gt; <span class="title">getUser</span><span class="params">(@Header(<span class="string">"Authorization"</span>)</span> String authorization)</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.参数注解<br>@Body：用于非表单请求体<br>@Field、@FieldMap：用于Post请求提交请求的表单字段，与 @FormUrlEncoded 注解配合使用<br>@Part、@PartMap：用于Post请求文件上传，与@Multipart注解配合使用<br>@Query、@QueryMap：@GET方法的查询参数（Query = Url 中 ‘?’ 后面的 key-value）<br>@Path：替换URL地址的{占位符}<br>@Url：请求的url地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// &#123;user&#125; 会被替换为方法的第一个参数 user（被@Path注解作用）</span><br><span class="line">@GET(&quot;users/&#123;user&#125;/repos&quot;)</span><br><span class="line">Call&lt;ResponseBody&gt; getBook(@Path(&quot;user&quot;)String user);</span><br><span class="line"></span><br><span class="line">// 传入的url会替换@GET里面的请求地址</span><br><span class="line">@GET</span><br><span class="line">Call&lt;ResponseBody&gt; query(@Url String url);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注意：<br>如果使用@Path(“url”)出现url被转义的话，使用@Path(value = “url”, encoded = true)，禁止转义</p></blockquote><blockquote><p>4.请求和响应格式的注解<br>@FormUrlEncoded：请求体是一个Form表单的样式(Content-Type:application/x-www-form-urlencoded)<br>@Multipart：请求体是一个包含文件上传的Form表单样式<br>@Streaming：响应体的数据以流的行驶返回，如果数据比较大，尽量使用这个注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如：注册需要用户名和年龄</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"regist"</span>)</span><br><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">regist</span><span class="params">(@Field(<span class="string">"username"</span>)</span> String name, @<span class="title">Field</span><span class="params">(<span class="string">"age"</span>)</span> <span class="keyword">int</span> age)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者也可以这样写，注意map中key的书写</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"regist"</span>)</span><br><span class="line"><span class="meta">@FormUrlEncoded</span></span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">regist</span><span class="params">(@FieldMap Map&lt;String, Object&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件，注意除Part外，其它类型需加上表单字段</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="meta">@Multipart</span></span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">upload</span><span class="params">(@Part(<span class="string">"name"</span>)</span> RequestBody name, @Part MultipartBody.Part file)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者也可以这样写，注意map中key的书写</span></span><br><span class="line"><span class="meta">@POST</span>(<span class="string">"upload"</span>)</span><br><span class="line"><span class="meta">@Multipart</span></span><br><span class="line"><span class="function">Call&lt;ResponseBody&gt; <span class="title">upload</span><span class="params">(@PartMap Map&lt;String, RequestBody&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用上传</span></span><br><span class="line">RequestBody file = RequestBody.create(MediaType.parse(<span class="string">"application/octet-stream"</span>), <span class="string">"这里是模拟文件的内容"</span>);</span><br><span class="line">MultipartBody.Part filePart = MultipartBody.Part.createFormData(<span class="string">"file"</span>, <span class="string">"test.txt"</span>, file);</span><br><span class="line">service.upload(name, filePart);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用上传</span></span><br><span class="line">Map&lt;String, RequestBody&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"name"</span>,name);</span><br><span class="line">map.put(<span class="string">"file\"; filename=\"test.txt"</span>,file);</span><br><span class="line">service.upload(map);</span><br></pre></td></tr></table></figure><h4 id="4-网络拦截器"><a href="#4-网络拦截器" class="headerlink" title="4.网络拦截器"></a>4.网络拦截器</h4><blockquote><p>addNetworkInterceptor添加的是网络拦截器，它会在request和response时分别被调用一次<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加依赖</span></span><br><span class="line">compile <span class="string">'com.squareup.okhttp3:logging-interceptor:3.5.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建日志拦截器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpLoggingInterceptor <span class="title">getHttpLoggingInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HttpLoggingInterceptor loggingInterceptor = <span class="keyword">new</span> HttpLoggingInterceptor(</span><br><span class="line"><span class="keyword">new</span> HttpLoggingInterceptor.Logger() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">Log.e(<span class="string">"OkHttp"</span>, <span class="string">"log = "</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line"><span class="keyword">return</span> loggingInterceptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一请求拦截器，封装共有的请求数据，每次请求都会带上</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Interceptor <span class="title">commonParamsInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Interceptor commonParams = <span class="keyword">new</span> Interceptor() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> okhttp3.<span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Request originRequest = chain.request();</span><br><span class="line">Request request;</span><br><span class="line">HttpUrl httpUrl = originRequest.url().newBuilder().</span><br><span class="line">addQueryParameter(<span class="string">"paltform"</span>, <span class="string">"android"</span>).</span><br><span class="line">addQueryParameter(<span class="string">"version"</span>, <span class="string">"1.0.0"</span>).build();</span><br><span class="line">request = originRequest.newBuilder().url(httpUrl).build();</span><br><span class="line"><span class="keyword">return</span> chain.proceed(request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> commonParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="5-数据解析器（Converter）"><a href="#5-数据解析器（Converter）" class="headerlink" title="5.数据解析器（Converter）"></a>5.数据解析器（Converter）</h4><blockquote><p>默认情况下，调用请求返回的结果都是Call<responsebody>，Converter可以为我们将ResponseBody转换为我们想要的类型。我们经常使用的GsonConverterFactory可以很方便的把服务端返回的json数据转为我们需要的对象，被@Body注解的的对象将会被Gson转换成RequestBody发送到服务器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入依赖</span></span><br><span class="line">compile <span class="string">'com.squareup.retrofit2:converter-gson:2.0.2'</span></span><br><span class="line"></span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">.baseUrl(BASE_URL) <span class="comment">// 设置网络请求的Url地址</span></span><br><span class="line">.addConverterFactory(GsonConverterFactory.create()) <span class="comment">// 设置数据解析器</span></span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动将我们的结果转为对应的对象</span></span><br><span class="line"><span class="meta">@GET</span>(<span class="string">"blog/&#123;id&#125;"</span>)</span><br><span class="line">Call&lt;Result&lt;Book&gt;&gt; getBook(<span class="meta">@Path</span>(<span class="string">"id"</span>) <span class="keyword">int</span> id);</span><br></pre></td></tr></table></figure></responsebody></p></blockquote>]]></content>
    
    <summary type="html">
    
      记录Retrofit的学习过程
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="android" scheme="http://lingchenjie.club/tags/android/"/>
    
      <category term="框架" scheme="http://lingchenjie.club/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Retrofit" scheme="http://lingchenjie.club/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>RxJava的学习记录</title>
    <link href="http://lingchenjie.club/2018/03/05/RxJava%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/03/05/RxJava的学习记录/</id>
    <published>2018-03-05T08:53:23.000Z</published>
    <updated>2018-03-18T11:43:16.938Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>RxJava使我们的代码的变的更加的简洁、清晰，可以使业务逻辑更加直观、明了。</p><h4 id="1-什么是观察者模式"><a href="#1-什么是观察者模式" class="headerlink" title="1.什么是观察者模式"></a>1.什么是观察者模式</h4><blockquote><p>举个栗子：<br>比如: <code>A</code> 是观察者，<code>B</code> 是被观察者，当 <code>B</code> 发生变化时，<code>A</code> 就可以立刻检测到。这种模式就是观察者模式。</p></blockquote><h4 id="2-RxJava的观察者模式"><a href="#2-RxJava的观察者模式" class="headerlink" title="2.RxJava的观察者模式"></a>2.RxJava的观察者模式</h4><blockquote><p>‘RxJava’ 中的概念<br>被观察者: <code>Observable</code><br>观察者：<code>Observer</code> 、<code>Subscriber</code><br>订阅：<code>subscribe</code> // 观察者需要订阅被观察者，才能建立联系<br>回调：<code>onNext</code> 、<code>onCompleted</code> 、<code>onError</code></p></blockquote><h4 id="3-Observer和Subscriber区别"><a href="#3-Observer和Subscriber区别" class="headerlink" title="3.Observer和Subscriber区别"></a>3.Observer和Subscriber区别</h4><blockquote><p><code>Subscriber</code>比<code>Observer</code>多了两个方法<code>onStart</code>和<code>unsubscribe</code><br><code>onStart</code> ：可以做一些数据的初始化，它是和<code>subscribe</code>是在同一个线程。<br><code>unsubscribe</code> : 取消订阅</p></blockquote><blockquote><p>注意：对于初始化数据一定要在主线程的话，<code>onStart</code>可能不适用，这时可以使用<code>doOnSubscribe</code>，使用时一定要在<code>doOnSubscribe</code>调用后调用<code>subscribeOn(AndroidSchedulers.mainThread())</code>用于指定主线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(onSubscribe)</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .doOnSubscribe(<span class="keyword">new</span> Action0() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            progressBar.setVisibility(View.VISIBLE); <span class="comment">// 需要在主线程执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定主线程</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(subscriber);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="4-Observable和Observer"><a href="#4-Observable和Observer" class="headerlink" title="4.Observable和Observer"></a>4.Observable和Observer</h4><blockquote><p><code>Observable</code> 是事件的发出者，<code>Observer</code>和<code>Subscriber</code> 是事件的处理者，如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个被观察者，它是事件的发出者</span></span><br><span class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</span><br><span class="line">        subscriber.onNext(<span class="string">"Hi"</span>);</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个观察者，它是事件的处理者</span></span><br><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Item: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两者之间进行关联(订阅)</span></span><br><span class="line">observable.subscribe(observer);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>注意：在一个事件队列中，<code>onError</code>和<code>onCompleted</code>是互斥的，当调用其中一个后，另外一个就不应该再次调用</p></blockquote><h4 id="5-just的使用"><a href="#5-just的使用" class="headerlink" title="5.just的使用"></a>5.just的使用</h4><blockquote><p>just(T…): 将传入的参数依次发送出来<br>前面我们使用<code>create</code>创建一个被观察者，这里可以使用<code>just</code>进行简写，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Observable observable = Observable.just(<span class="string">"Hello"</span>, <span class="string">"Hi"</span>);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="6-from的使用"><a href="#6-from的使用" class="headerlink" title="6.from的使用"></a>6.from的使用</h4><blockquote><p>from(T[]) / from(Iterable&lt;? extends T&gt;) : 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来<br>前面我们使用<code>create</code>创建一个被观察者，这里可以使用<code>from</code>进行简写，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] words = &#123;<span class="string">"Hello"</span>, <span class="string">"Hi"</span>&#125;;</span><br><span class="line">Observable observable = Observable.from(words);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="7-Action0和Action1的使用"><a href="#7-Action0和Action1的使用" class="headerlink" title="7.Action0和Action1的使用"></a>7.Action0和Action1的使用</h4><blockquote><p><code>Action0</code> 和 <code>Action1</code> 都是一个接口，可以被当成一个包装对象<br><code>Action0</code> : 内部只有个<code>call</code>方法，无参<br><code>Action1</code> : 内部只有个<code>call</code>方法，有参</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</span><br><span class="line">    <span class="comment">// onNext()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="comment">// onError()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Error handling</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</span><br><span class="line">    <span class="comment">// onCompleted()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(tag, <span class="string">"completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()</span></span><br><span class="line">observable.subscribe(onNextAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction);</span><br><span class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></span><br><span class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</span><br></pre></td></tr></table></figure><h4 id="8-Scheduler的使用"><a href="#8-Scheduler的使用" class="headerlink" title="8.Scheduler的使用"></a>8.Scheduler的使用</h4><blockquote><p>线程控制器，用于控制每一段代码应该在哪个线程中运行<br>1.默认在当前线程中：Schedulers.immediate()<br>2.启用新的线程: Schedulers.newThread()<br>3.耗时操作，IO线程，内部自己维护线程池: Schedulers.io()<br>4.处理计算工作的线程： Schedulers.computation()<br>5.主线程运行: AndroidSchedulers.mainThread()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer number)</span> </span>&#123;</span><br><span class="line">            Log.d(tag, <span class="string">"number:"</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p><code>observeOn()</code> 指定的是它之后的操作所在的线程。因此如果有多次切换线程的需求，只要在每个想要切换线程的位置前面调用一次 observeOn() 即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// IO 线程，由 subscribeOn() 指定</span></span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(Schedulers.newThread())</span><br><span class="line">    .map(mapOperator) <span class="comment">// 新线程，由 observeOn() 指定</span></span><br><span class="line">    .observeOn(Schedulers.io())</span><br><span class="line">    .map(mapOperator2) <span class="comment">// IO 线程，由 observeOn() 指定</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread) </span><br><span class="line">    .subscribe(subscriber);  <span class="comment">// Android 主线程，由 observeOn() 指定</span></span><br></pre></td></tr></table></figure><h4 id="9-map的使用"><a href="#9-map的使用" class="headerlink" title="9.map的使用"></a>9.map的使用</h4><blockquote><p>事件对象的直接变换，就是把一个对象转换为另外一个对象，具体看代码就懂了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"images/logo.png"</span>) <span class="comment">// 输入类型 String</span></span><br><span class="line"><span class="comment">// 把String 类型转换为Bitmap类型</span></span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;<span class="comment">// Fun1 也是一个接口，是一个包装类，和Action相似，它有返回值</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String filePath)</span> </span>&#123; <span class="comment">// 参数类型 String</span></span><br><span class="line">            <span class="keyword">return</span> getBitmapFromPath(filePath); <span class="comment">// 返回类型 Bitmap</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123; <span class="comment">// 参数类型 Bitmap</span></span><br><span class="line">            showBitmap(bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="10-flatMap的使用"><a href="#10-flatMap的使用" class="headerlink" title="10.flatMap的使用"></a>10.flatMap的使用</h4><blockquote><p>和map相似，都是把一个对象转为一个对象，但<code>flatMap</code>比<code>map</code>多做了一步处理，<code>flatMap</code>的<code>call</code>方法返回的是一个观察者对象，它对这个观察者对象又进行一次转换<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Student[] students = ...;</span><br><span class="line">Subscriber&lt;Course&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Course&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, course.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">Observable.from(students)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.from(student.getCourses());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(subscriber);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="11-zip的使用"><a href="#11-zip的使用" class="headerlink" title="11.zip的使用"></a>11.zip的使用</h4><blockquote><p>比如我们在网络请求中，需要显示对话框，这时如果需要同时发出两个请求，在两个请求都结束的时候需要把两者数据合并，这时就用到了<code>zip</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.zip(Network.getAppApi().getItems(),</span><br><span class="line">Network.getAppApi().getItems2(),</span><br><span class="line"><span class="keyword">new</span> Fun1&lt;List&lt;Item&gt;, List&lt;Item&gt;, List&lt;Item&gt;&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">apply</span><span class="params">(List&lt;Item&gt; item1, List&lt;ZhuangbiImage&gt; item2)</span> </span>&#123;</span><br><span class="line">List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;Item&gt;();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.subscribeOn(Schedulers.io())</span><br><span class="line">.observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">.subscribe(onSubscribe);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="12-compose的使用"><a href="#12-compose的使用" class="headerlink" title="12.compose的使用"></a>12.compose的使用</h4><blockquote><p>效果：清晰的做到代码重用，使得整个链式调用更加明了<br>学习<code>compost</code>需要先了解<code>Transformer</code>，<code>Transformer</code>从单词意思来理解就是转换。<br>Transformer实际上就是一个Func1&lt;Observable<t>, Observable<r>&gt;，换言之就是：可以通过它将一种类型的Observable转换成另一种类型的Observable<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">Transformer&lt;T, T&gt; <span class="title">applySchedulers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Transformer&lt;T, T&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;T&gt; <span class="title">call</span><span class="params">(Observable&lt;T&gt; observable)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这里单一的处理线程的调度</span></span><br><span class="line"><span class="keyword">return</span> observable.subscribeOn(Schedulers.io())</span><br><span class="line"> .observeOn(AndroidSchedulers.mainThread());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Observable.from(someSource)</span><br><span class="line">    .map(<span class="keyword">new</span> Func1&lt;Data, Data&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Data <span class="title">call</span><span class="params">(Data data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> manipulate(data);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .compose(<span class="keyword">this</span>.&lt;YourType&gt;applySchedulers()) <span class="comment">// 这样就调用applySchedulers方法，线程调度达到了复用效果</span></span><br><span class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Data&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Data data)</span> </span>&#123;</span><br><span class="line">doSomething(data);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></r></t></p></blockquote><blockquote><p>上面的代码，我们可以清晰的了解到<code>compost</code>方法的好处，但还有个问题，我们每次调用<code>applySchedulers</code>都会新建一个<code>Transformer</code>，解决方法如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无泛型实例</span></span><br><span class="line"><span class="keyword">final</span> Observable.Transformer schedulersTransformer = <span class="keyword">new</span>  Observable.Transformer() &#123;</span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">(Object observable)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((Observable)observable).subscribeOn(Schedulers.newThread())</span><br><span class="line">.observeOn(AndroidSchedulers.mainThread());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时进行强制类型转换</span></span><br><span class="line">&lt;T&gt; Observable.<span class="function">Transformer&lt;T, T&gt; <span class="title">applySchedulers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Observable.Transformer&lt;T, T&gt;) schedulersTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>RxJava的介绍的文章挺多的，往往看着看着就迷茫了，想把所有原理都弄明白，到最后却失去了最初的兴趣，学习知识就是这样，当你熟练应用后，再去学习原理，或许会有一种茅塞顿开的感觉。</p></blockquote>]]></content>
    
    <summary type="html">
    
      记录RxJava的学习过程
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="android" scheme="http://lingchenjie.club/tags/android/"/>
    
      <category term="框架" scheme="http://lingchenjie.club/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="RxJava" scheme="http://lingchenjie.club/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>自己动手搭建ShadowSocks的教程</title>
    <link href="http://lingchenjie.club/2018/03/04/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E6%90%AD%E5%BB%BAShadowSocks%E7%9A%84%E6%95%99%E7%A8%8B/"/>
    <id>http://lingchenjie.club/2018/03/04/自己动手搭建ShadowSocks的教程/</id>
    <published>2018-03-04T03:08:49.000Z</published>
    <updated>2018-03-23T01:54:38.800Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>记录如何搭建ShadowSocks，便于以后学习和查询资料</p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>之前看到很多朋友都在搭建自己的翻墙服务器，一直没有搞明白原理，加上自己之前一直用<code>lantern</code>还不错，但是近几天<code>lantern</code>时好时坏的，就感觉挺麻烦的，就在网上找了找如何自己翻墙服务器的教程，自己动手操作了一下，在此记录一下。</p></blockquote><blockquote><p>翻墙的原理：<br>其实就是你访问网站的数据不从你的电脑中直接去请求，而是通过你的代理服务器去请求你所访问网站的数据，你的电脑和你的代理服务器之间传输的数据经过了加密传输，这样就绕过了墙的的拦截。代理服务器位置必须是在国外或没有被墙的位置，不然也会被墙。</p></blockquote><h4 id="1-服务器的选择"><a href="#1-服务器的选择" class="headerlink" title="1.服务器的选择"></a>1.服务器的选择</h4><blockquote><p>在云服务大火的今天，国内互联网巨头公司的云服务也是做得风生水起。比如：<a href="https://www.alibabacloud.com?_blank" target="_blank" rel="noopener">阿里云</a>、<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a> 都有国外的服务器。国外的云服务有<a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a>、<a href="https://bandwagonhost.com/" target="_blank" rel="noopener">搬瓦工(Bandwagonhost)</a>等。这几种云服务都不错，大家可以随意选择，我使用的搬瓦工，接下来介绍下如何购买搬瓦工云服务：</p></blockquote><blockquote><p>进入主页后，我们可以看到如下图的内容<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_1.png" alt="ShadowSocks"></p></blockquote><blockquote><p>随意选择一个，点击<code>Order KVM or OpenVZ</code>，进入<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_2.png" alt="ShadowSocks"></p></blockquote><blockquote><p>这时你可以根据自己的经济情况选择一个即可，选择好后，将会进入<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_3.png" alt="ShadowSocks"></p></blockquote><blockquote><p>点击结算<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_4.png" alt="ShadowSocks"></p></blockquote><blockquote><p>如何没有注册的话，本页面需要输入个人信息<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_5.png" alt="ShadowSocks"></p></blockquote><blockquote><p>完成信息填写后，选择支付方式，点击<code>Complete Order</code>进入下一步完成支付即可<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_6.png" alt="ShadowSocks"></p></blockquote><blockquote><p>付款成功后，我们就可以使用了</p></blockquote><h4 id="2-搬瓦工控制面板的使用"><a href="#2-搬瓦工控制面板的使用" class="headerlink" title="2.搬瓦工控制面板的使用"></a>2.搬瓦工控制面板的使用</h4><blockquote><p>购买完成后，我们就可以进入到搬瓦工的控制面板了，进入主页，选择<code>Service</code> —&gt; <code>My Service`</code>进入<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_7.png" alt="ShadowSocks"></p></blockquote><blockquote><p>然后找到刚才购买的VPS后面有个“KiwiVM Control Panel”点击后就进入了后台控制面板<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_8.png" alt="ShadowSocks"></p></blockquote><blockquote><p>进入控制面板后，我们先停止当前的运行<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_9.png" alt="ShadowSocks"></p></blockquote><blockquote><p>重新安装操作系统，如下图所示：<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_10.png" alt="ShadowSocks"></p></blockquote><blockquote><p>安装完成之后如下，记住密码和端口号，下面需要使用到<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_11.png" alt="ShadowSocks"></p></blockquote><h4 id="3-通过远程工具Xshell5搭建ShadowSocks"><a href="#3-通过远程工具Xshell5搭建ShadowSocks" class="headerlink" title="3.通过远程工具Xshell5搭建ShadowSocks"></a>3.通过远程工具<code>Xshell5</code>搭建<code>ShadowSocks</code></h4><blockquote><p><a href="http://sw.bos.baidu.com/sw-search-sp/software/30b61b092de57/Xshell_5.0.1325.exe" target="_blank" rel="noopener">点击下载Xshell5</a> ，下载后进行安装，安装后打开，新建，如下图：<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_12.png" alt="ShadowSocks"></p></blockquote><blockquote><p>然后会弹出对话框，选择用户身份验证，ip和端口号可以在控制面板的<code>Main controls</code>中查看<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_13.png" alt="ShadowSocks"></p></blockquote><blockquote><p>点击确定之后，稍等下会有弹出框，输入用户名’root’，点击确定之后，稍等下又会弹出输入密码，输入之前我们在控制面板中获取的那个那个密码即可<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_14.png" alt="ShadowSocks"><br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_15.png" alt="ShadowSocks"></p></blockquote><blockquote><p>这个时候已经连接成功了，我们输入“apt-get update”回车，如图：<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_16.png" alt="ShadowSocks"></p></blockquote><blockquote><p>继续输入“apt-get install wget -y”回车<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_17.png" alt="ShadowSocks"></p></blockquote><blockquote><p>复制以下全部内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh &amp;&amp; chmod +x shadowsocks-all.sh &amp;&amp; ./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>然后粘贴到“xshell”里面，如图：<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_18.png" alt="ShadowSocks"><br>然后：回车<br>回车后会自动下载脚本，大家按照下图方法操作：<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_19.png" alt="ShadowSocks"><br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_20.png" alt="ShadowSocks"><br>自动安装中…<br>经过一段时间的等待，安装成功会出现下图信息，记得保存<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_21.png" alt="ShadowSocks"></p></blockquote><h4 id="安装锐速，可以加快访问速度"><a href="#安装锐速，可以加快访问速度" class="headerlink" title="安装锐速，可以加快访问速度"></a>安装锐速，可以加快访问速度</h4><blockquote><p>复制下面信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -qO /tmp/appex.sh &quot;https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh&quot; &amp;&amp; bash /tmp/appex.sh &apos;install&apos;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>然后粘贴到“xshell” 里面，回车，如下图：<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_22.png" alt="ShadowSocks"></p></blockquote><blockquote><p>等待一会，锐速就安装完成<br>然后输入“reboot”重启服务器,大约一分钟后服务器就会重启成功，如下图<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_23.png" alt="ShadowSocks"></p></blockquote><h4 id="安装Shadowsocks客户端"><a href="#安装Shadowsocks客户端" class="headerlink" title="安装Shadowsocks客户端"></a>安装Shadowsocks客户端</h4><blockquote><p><a href="https://github.com/shadowsocks" target="_blank" rel="noopener">github地址</a> ，进入<code>github</code>选择你的系统的Shadowsocks，比如<a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">shadowsocks-windows</a>，点击进入，如下图操作：<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_24.png" alt="ShadowSocks"><br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_25.png" alt="ShadowSocks"></p></blockquote><blockquote><p>解压后打开，如下图进行配置：<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_26.png" alt="ShadowSocks"></p></blockquote><blockquote><p>配置完成之后，你就可以科学上网了，找学习资料更好的学习了<br><img src="/2018/03/04/自己动手搭建ShadowSocks的教程/Bandwagonhost_27.png" alt="ShadowSocks"></p></blockquote>]]></content>
    
    <summary type="html">
    
      记录如何搭建ShadowSocks
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="ShadowSocks" scheme="http://lingchenjie.club/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>dagger2的学习记录(应用)</title>
    <link href="http://lingchenjie.club/2018/03/03/dagger2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%BA%94%E7%94%A8/"/>
    <id>http://lingchenjie.club/2018/03/03/dagger2学习记录-应用/</id>
    <published>2018-03-03T15:26:16.000Z</published>
    <updated>2018-03-18T11:41:57.328Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>记录学习dagger2的一些知识点，便于以后回顾和复习</p><p>通过前两篇文章，我们基本了解了<code>dagger2</code>的使用，在本篇文章中，我们将一起在项目中使用起来。</p><p>在对项目进行改造前，我们先理清项目中每个类的依赖关系。下图是我们将要实现的，之前我们对数据的操作都是直接在当前<code>Activity</code>中<code>new</code>对象，现在我们通过<code>di</code>把用到的数据操作对象注入进目标对象中。</p><p><img src="/2018/03/03/dagger2学习记录-应用/dagger2项目结构图.png" alt="dagger2"></p><h4 id="1-创建-Qualifier"><a href="#1-创建-Qualifier" class="headerlink" title="1.创建@Qualifier"></a>1.创建<code>@Qualifier</code></h4><blockquote><p>在有两个返回参数相同，需要使用<code>Qualifier</code>注解加以区分；使用<code>Qualifier</code>注解，可以让程序员更加醒目</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ActivityContext专门为Activity的Context提供，区分Application</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActivityContext &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ApplicationContext，同上</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ApplicationContext &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于数据库参数区分</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DatabaseInfo &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-定义-Scope"><a href="#2-定义-Scope" class="headerlink" title="2.定义@Scope"></a>2.定义<code>@Scope</code></h4><blockquote><p>方便控制<code>Component</code>，进而控制<code>Module</code>的生命周期</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PerActivity &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-定义Module"><a href="#3-定义Module" class="headerlink" title="3.定义Module"></a>3.定义<code>Module</code></h3><blockquote><p>这里定义的是 <code>ApplicationModule</code> 和 <code>ActivityModule</code>，对于返回的<code>Context</code>要使用自定义的<code>Qualifier</code>加以区分</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Application mApplication;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplicationModule</span><span class="params">(Application app)</span> </span>&#123;</span><br><span class="line">        mApplication = app;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@ApplicationContext</span></span><br><span class="line">    <span class="function">Context <span class="title">provideContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Application <span class="title">provideApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@DatabaseInfo</span></span><br><span class="line">    <span class="function">String <span class="title">provideDatabaseName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"demo-dagger.db"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@DatabaseInfo</span></span><br><span class="line">    <span class="function">Integer <span class="title">provideDatabaseVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">SharedPreferences <span class="title">provideSharedPrefs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mApplication.getSharedPreferences(<span class="string">"demo-prefs"</span>, Context.MODE_PRIVATE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Activity mActivity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityModule</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        mActivity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@ActivityContext</span></span><br><span class="line">    <span class="function">Context <span class="title">provideContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mActivity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mActivity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-修改被注入对象"><a href="#4-修改被注入对象" class="headerlink" title="4.修改被注入对象"></a>4.修改被注入对象</h4><blockquote><p>使用<code>@Inject</code>将使用到的工具类对象注入到容器中，对于构造方法中传入的参数，如果不明确要使用自定义<code>Qualifier</code>注解加以区分</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataManager</span><span class="params">(@ApplicationContext Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">                       DbHelper dbHelper,</span></span></span><br><span class="line"><span class="function"><span class="params">                       SharedPrefsHelper sharedPrefsHelper)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mDbHelper = dbHelper;</span><br><span class="line">        mSharedPrefsHelper = sharedPrefsHelper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DbHelper</span><span class="params">(@ApplicationContext Context context,</span></span></span><br><span class="line"><span class="function"><span class="params">                    @DatabaseInfo String dbName,</span></span></span><br><span class="line"><span class="function"><span class="params">                    @DatabaseInfo Integer version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, dbName, <span class="keyword">null</span>, version);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Component的创建"><a href="#5-Component的创建" class="headerlink" title="5.Component的创建"></a>5.<code>Component</code>的创建</h4><blockquote><p><code>ActivityComponent</code>依赖于<code>ApplicationComponent</code>，可以共享<code>ApplicationComponent</code>提供出去的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Component</span>(modules = ApplicationModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(DemoApplication demoApplication)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApplicationContext</span></span><br><span class="line">    <span class="function">Context <span class="title">getContext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Application <span class="title">getApplication</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DataManager <span class="title">getDataManager</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SharedPrefsHelper <span class="title">getPreferenceHelper</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DbHelper <span class="title">getDbHelper</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖于ApplicationModule</span></span><br><span class="line"><span class="meta">@PerActivity</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = ApplicationComponent.class, modules = ActivityModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity mainActivity)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-获取注入的对象"><a href="#6-获取注入的对象" class="headerlink" title="6.获取注入的对象"></a>6.获取注入的对象</h4><blockquote><p>使用<code>@Inject</code>给用到的属性加注解，使用<code>DaggerXXXComponent</code>完成注入</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ApplicationComponent applicationComponent;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataManager dataManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DemoApplication <span class="title">get</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (DemoApplication) context.getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        applicationComponent = DaggerApplicationComponent</span><br><span class="line">                .builder()</span><br><span class="line">                .applicationModule(<span class="keyword">new</span> ApplicationModule(<span class="keyword">this</span>))</span><br><span class="line">                .build();</span><br><span class="line">        applicationComponent.inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationComponent <span class="title">getComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    DataManager mDataManager;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActivityComponent <span class="title">getActivityComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (activityComponent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            activityComponent = DaggerActivityComponent.builder()</span><br><span class="line">                    .activityModule(<span class="keyword">new</span> ActivityModule(<span class="keyword">this</span>))</span><br><span class="line">                    .applicationComponent(DemoApplication.get(<span class="keyword">this</span>).getComponent())</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> activityComponent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        getActivityComponent().inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码地址：<a href="https://github.com/LingChenJie/DaggerDemo" target="_blank" rel="noopener">https://github.com/LingChenJie/DaggerDemo</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><p>一个应用存在一个<code>ApplicationComponent</code>,管理app中的单例依赖</p></blockquote><blockquote><p>尽量多使用 <code>Scope</code> 作用域，增加可读性还能方便控制依赖实例的生命周期。</p></blockquote><blockquote><p>当参数不明确时，使用<code>@Qualifier</code>自定义注解加以区分</p></blockquote>]]></content>
    
    <summary type="html">
    
      记录dagger2的知识点
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="android" scheme="http://lingchenjie.club/tags/android/"/>
    
      <category term="框架" scheme="http://lingchenjie.club/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="dagger2" scheme="http://lingchenjie.club/tags/dagger2/"/>
    
  </entry>
  
  <entry>
    <title>dagger2的学习记录(进阶)</title>
    <link href="http://lingchenjie.club/2018/03/02/dagger2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E8%BF%9B%E9%98%B6/"/>
    <id>http://lingchenjie.club/2018/03/02/dagger2学习记录-进阶/</id>
    <published>2018-03-02T07:02:53.000Z</published>
    <updated>2018-03-18T11:45:15.507Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>记录学习dagger2的一些知识点，便于以后回顾和复习</p><h3 id="dagger2-进阶"><a href="#dagger2-进阶" class="headerlink" title="dagger2 进阶"></a><code>dagger2</code> 进阶</h3><p>在上一篇文章，我们学习了<code>dagger2</code>的基本使用，相信你已经对<code>dagger2</code>有了自己的认识，本篇文章我们就来完善和学习下<code>dagger2`</code>其他的知识点。</p><h4 id="1-Lazy-延迟注入"><a href="#1-Lazy-延迟注入" class="headerlink" title="1.Lazy(延迟注入)"></a>1.Lazy(延迟注入)</h4><blockquote><p>为了加快类的加载速度，我们想在使用这个对象时再去加载它，这时<code>Lazy&lt;T&gt;</code>就派上用场了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> Lazy&lt;Pen&gt; pencil;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pencil.get().write();<span class="comment">// pencil.get() 返回 Pen 实例</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-Provider-注入"><a href="#2-Provider-注入" class="headerlink" title="2.Provider 注入"></a>2.Provider 注入</h4><blockquote><p>当我们需要多个实例时，可以使用<code>Provider&lt;T&gt;</code>，每次调用<code>get()</code>方法都会重新创建实例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> Provider&lt;Pen&gt; penProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Pen pen, pen2;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createPen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pen = penProvider.get();</span><br><span class="line">pen2 = penProvider.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Singleton-Scope"><a href="#3-Singleton-Scope" class="headerlink" title="3.Singleton Scope"></a>3.Singleton Scope</h4><blockquote><p>Scope 作用域的本质是 Component 会持有与之绑定的依赖实例的引用，要想确保实例的生命周期，关键在于控制 Component 的生命周期。</p></blockquote><blockquote><p>在上一篇文章中，我们自定义过<code>@Scope</code>注解，其实和<code>@Singleton</code>一样，<code>@Singleton</code>的含义是保证单例，但是如果我们产生了多个Component就无法保证单例了。</p><p>如何保证单例呢？我们可以在<code>AppComponent</code>使用Singleton作用域，保证绑定的依赖实例的单例。它生效的原因是<code>AppComponent</code>只会在<code>Application</code>中创建一次，由<code>AppComponent</code>的单例来保证绑定的依赖实例的单例。</p></blockquote><h4 id="4-Binding-Instances"><a href="#4-Binding-Instances" class="headerlink" title="4.Binding Instances"></a>4.Binding Instances</h4><blockquote><p><code>Component</code> 可以间接持有<code>Module</code> 或 <code>Inject</code> 目标类构造函数提供的依赖实例，除了这两种方式，<code>Component</code> 还可以在创建 <code>Component</code>的时候绑定依赖实例，用以注入。这就是<code>@BindsInstance</code>注解的作用，只能在 <code>Component.Builder</code> 中使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">没有使用`<span class="meta">@BindsInstance</span>`之前</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeActivityModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HomeActivity activity;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeActivityModule</span><span class="params">(HomeActivity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@ActivityScope</span>  <span class="comment">// 自定义作用域</span></span><br><span class="line">    <span class="function">Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> activity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(modules = HomeActivityModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HomeActivityComponent</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用`BindsInstance`后，上面的`Module`就可以省略了</span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HomeActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="meta">@BindsInstance</span></span><br><span class="line">        <span class="function">Builder <span class="title">activity</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line">        <span class="function">HomeActivityComponent <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优先使用<code>@BindsInstance</code>方法，相对于写一个带有构造函数带有参数的 <code>Module</code>。</p></blockquote><h4 id="5-Component-依赖关系"><a href="#5-Component-依赖关系" class="headerlink" title="5.Component 依赖关系"></a>5.<code>Component</code> 依赖关系</h4><blockquote><p>举个栗子：我的车我的朋友也可以开</p><p>分析：<code>FriendComponet</code>依赖于我的<code>MeComponent</code>，还是代码比较直观点，直接看代码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.e(<span class="string">"Car"</span>, <span class="string">"汽车开始行驶了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MeModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">provideCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(modules = &#123;MeModule.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MeComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(Me me)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;<span class="comment">// 需要对外开放，朋友才能驾驶</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FriendComponent 依赖于 MeComponent</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = MeComponent.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FriendComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(Friend friend)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样，朋友可以成功的驾驶我的汽车了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Friend</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Friend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MeComponent meComponent = DaggerMeComponent.builder().build();</span><br><span class="line">        DaggerFriendComponent.builder()</span><br><span class="line">                .meComponent(meComponent)</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.drive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行单元测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFriendCar</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Friend friend = <span class="keyword">new</span> Friend();</span><br><span class="line">friend.drive();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果打印如下</span></span><br><span class="line">... Car: 汽车开始行驶了...</span><br></pre></td></tr></table></figure><h4 id="5-Component-继承关系"><a href="#5-Component-继承关系" class="headerlink" title="5.Component 继承关系"></a>5.<code>Component</code> 继承关系</h4><blockquote><p>举个栗子：儿子继承父亲的财产</p><p><code>SubComponent</code>称之为子<code>Component</code>，还是从代码中学习继承关系比较直观点</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Money</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Money</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Money"</span>, <span class="string">"恭喜您！您将拥有1000万美金"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.FatherModule需要指定`subcomponents`</span></span><br><span class="line"><span class="meta">@Module</span>(subcomponents = SonComponent.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FatherModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FatherModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">provideMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Money();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.`SonComponent`使用`@Subcomponent`进行标注</span></span><br><span class="line"><span class="meta">@Subcomponent</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SonComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(Son son)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subcomponent</span>.Builder</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="function">SonComponent <span class="title">build</span><span class="params">()</span></span>; <span class="comment">// 3. SubComponent 必须显式地声明 Subcomponent.Builder</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `FatherComponent`需要指定创建`SonComponent.Builder`的方法</span></span><br><span class="line"><span class="meta">@Component</span>(modules = FatherModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FatherComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(Father father)</span></span>;</span><br><span class="line"></span><br><span class="line">    SonComponent.<span class="function">Builder <span class="title">sonComponent</span><span class="params">()</span></span>;<span class="comment">// 4. 用来创建 `Subcomponent`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    Money money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FatherComponent fatherComponent = DaggerFatherComponent.builder().build();</span><br><span class="line"></span><br><span class="line">        SonComponent.Builder builder = fatherComponent.sonComponent();</span><br><span class="line"></span><br><span class="line">        builder.build().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        money.getMoney();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行单元测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSonMoney</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Son son = <span class="keyword">new</span> Son();</span><br><span class="line">son.showMoney();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果如下：</span></span><br><span class="line">... Money: 恭喜您！您将拥有<span class="number">1000</span>万美金</span><br></pre></td></tr></table></figure><blockquote><p>总结(从别的地方抄的)：</p><p>相同点：<br>1.两者都能复用其他 Component 的依赖<br>2.有依赖关系和继承关系的 Component 不能有相同的 Scope</p></blockquote><blockquote><p>不同点：<br>1.依赖关系中被依赖的 Component 必须显式地提供公开依赖实例的接口，而 SubComponent 默认继承 parent Component 的依赖。<br>2.依赖关系会生成两个独立的 DaggerXXComponent 类，而 SubComponent 不会生成 独立的 DaggerXXComponent 类。</p></blockquote>]]></content>
    
    <summary type="html">
    
      记录dagger2的知识点
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="android" scheme="http://lingchenjie.club/tags/android/"/>
    
      <category term="框架" scheme="http://lingchenjie.club/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="dagger2" scheme="http://lingchenjie.club/tags/dagger2/"/>
    
  </entry>
  
  <entry>
    <title>dagger2的学习记录(入门)</title>
    <link href="http://lingchenjie.club/2018/03/01/dagger2%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://lingchenjie.club/2018/03/01/dagger2学习记录/</id>
    <published>2018-03-01T15:26:16.000Z</published>
    <updated>2018-03-18T11:41:32.859Z</updated>
    
    <content type="html"><![CDATA[<p>[<em>writer：<a href="https://lingchenjie.github.io/about/" target="_blank" rel="noopener">杰辰</a> </em>]</p><p>记录学习dagger2的一些知识点，便于以后回顾和复习</p><h3 id="dagger2的好处"><a href="#dagger2的好处" class="headerlink" title="dagger2的好处"></a>dagger2的好处</h3><blockquote><p>1.可以很方便的构建和修改对象的构造函数，只需要维护好<code>Component</code>和<code>modlue</code></p><p>2.可以非常方便的进行单元测试</p></blockquote><h3 id="dagger2-入门"><a href="#dagger2-入门" class="headerlink" title="dagger2 入门"></a><code>dagger2</code> 入门</h3><p>看过很多关于dagger2的文章，好多文章一开始就介绍名词，直接没有看下去的信心，本篇我就带着大家通过一些简单的例子学会 <code>dagger2</code> 的使用</p><h4 id="1-引入dagger2依赖"><a href="#1-引入dagger2依赖" class="headerlink" title="1.引入dagger2依赖"></a>1.引入dagger2依赖</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在app的build.gradle中添加如下代码：</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// apt command comes from the android-apt plugin</span></span><br><span class="line">annotationProcessor <span class="string">'com.google.dagger:dagger-compiler:2.12'</span></span><br><span class="line">compile <span class="string">'com.google.dagger:dagger:2.12'</span></span><br><span class="line">provided <span class="string">'javax.annotation:jsr250-api:1.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-学习-Inject-和-Component-的使用"><a href="#2-学习-Inject-和-Component-的使用" class="headerlink" title="2. 学习 @Inject 和 @Component 的使用"></a>2. 学习 <code>@Inject</code> 和 <code>@Component</code> 的使用</h4><p>举个栗子：小明有一个笔可以用来写字。</p><p>分析：小明是一个对象(Person),笔是一个对象(Pen),写字是笔的动作(write)。接着我们来用代码实现，并且使用 <code>dagger2</code> 进行之间的关联，如下：</p><blockquote><p>1.创建 <code>Pen</code> 类</p><p>在 <code>Pen</code> 中，我们使用 <code>@Inject</code> 来标注构造方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Pen"</span>, <span class="string">"开始写字了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.创建 <code>Person</code> 类</p><p>在 <code>Person</code> 中，我们使用 <code>@Inject</code> 来标注需要获取对象的属性名，<code>DaggerPersonComponent</code> 当前还不存在，暂时可以忽略掉</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> Pen pen;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DaggerPersonComponent.builder()</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 新建 <code>PersonComponent</code> 接口</p><p>在 <code>PersonComponent</code> 中，我们使用 <code>@Component</code> 来标注类名，<code>void inject(...)</code> 表示将注入到 <code>Person</code> 对象中 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(Person p)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后，进行编译 (执行<code>Build -&gt; Make Build</code>) ，这时，Person中的 <code>DaggerPersonComponent</code> 就可以找到了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">进行单元测试：</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersonWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.pen.write();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果打印如下</span></span><br><span class="line">... Pen: 开始写字了</span><br></pre></td></tr></table></figure><blockquote><p>结论：</p><p>1.<code>@Inject</code> : 通过 <code>@Inject</code> 标记的构造函数会自动加入到一个容器中，当用 <code>@Inject</code> 标记需要依赖的变量时，<code>Dagger2</code> 会在这个容器中找到这个变量相关的构造函数，并把相关实例构造出来</p><p>2.<code>@Component</code> : 通过 <code>@Component</code> 标注的接口，这个接口相当于中间人，中间人会提供给目标对象中有 <code>@Inject</code> 标注的变量注入相对应的值。在编译后，目标对象需要根据中间人接口生成的实现类 <code>DaggerxxxComponet</code> 进行调用 <code>inject(this)</code> 真正完成注入。</p></blockquote><h4 id="3-学习-Module-和-Provides-的使用"><a href="#3-学习-Module-和-Provides-的使用" class="headerlink" title="3. 学习 @Module 和 @Provides 的使用"></a>3. 学习 <code>@Module</code> 和 <code>@Provides</code> 的使用</h4><p>还是这个栗子：小明有一个笔可以用来写字</p><p>分析：小明是一个对象(Person),笔是一个对象(Pen),写字是笔的动作(write)。但是现在我们构造笔(Pen)这个对象时，我们需要传入一个参数，接着我们来用代码实现，并且使用 <code>dagger2</code> 进行之间的关联，代码如下：</p><blockquote><p>1.创建 <code>Pen</code> 类，就是一个普通对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pen</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Pen"</span>, name + <span class="string">"开始写字了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.创建 <code>PersonModule</code> 类，用 <code>@Module</code> 标注类名，用 <code>@Provides</code> 标注方法名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pen <span class="title">providePen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pen(<span class="string">"铅笔"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.创建 <code>PersonComponent</code> 接口，用 <code>@Component(modules = PersonModule.class)</code> 标注接口名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = PersonModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(Person p)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.创建 <code>Person</code> 类，和之前创建的一样</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> Pen pen;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DaggerPersonComponent.builder()</span><br><span class="line">                .personModule(<span class="keyword">new</span> PersonModule())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.进行测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersonWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.pen.write();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果打印如下</span></span><br><span class="line">... Pen: 铅笔开始写字了</span><br></pre></td></tr></table></figure><blockquote><p>结论：</p><p>1.<code>@Module</code> : <code>@Module</code> 用于标注提供依赖的类，当我们使用第三方类提供的方法时又不想改动第三方类时，<code>@Module</code> 就完美解决了这个问题</p><p>2.<code>@Provides</code> : <code>@Provides</code> 用于标注Module所标注类中的方法，该方法在需要提供依赖时调用，从而把提供好的对象当做依赖给标注了<code>@Inject</code>的变量赋值</p></blockquote><h4 id="3-学习-Qualifier-的使用"><a href="#3-学习-Qualifier-的使用" class="headerlink" title="3. 学习 @Qualifier 的使用"></a>3. 学习 <code>@Qualifier</code> 的使用</h4><p>还是这个栗子：小明有一个笔可以用来写字</p><p>分析：小明是一个对象(Person),笔是一个对象(Pen),写字是笔的动作(write)。但是现在在Person中需要铅笔和钢笔，接着我们来用代码实现，并且使用 <code>dagger2</code> 进行之间的关联，代码如下</p><blockquote><p>1.创建 <code>Pen</code> 类，就是一个普通对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pen</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Pen"</span>, name + <span class="string">"开始写字了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.创建 <code>PencilQualifier</code> 和 <code>FountainPenQualifier</code>，用来标注铅笔和钢笔</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PencilQualifier &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FountainPenQualifier &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.创建 <code>PersonModule</code>类， <code>@PencilQualifier</code>和 <code>@FountainPenQualifier</code>，用来标注提供铅笔对象的方法和提供钢笔对象的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PencilQualifier</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pen <span class="title">providePencilPen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pen(<span class="string">"铅笔"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FountainPenQualifier</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pen <span class="title">provideFountainPen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pen(<span class="string">"钢笔"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.创建 <code>PersonComponent</code>接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = PersonModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(Person p)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.创建 <code>Person</code>类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 铅笔</span></span><br><span class="line">    <span class="meta">@PencilQualifier</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> Pen pencil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 钢笔</span></span><br><span class="line">    <span class="meta">@FountainPenQualifier</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> Pen fountainPen;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DaggerPersonComponent.builder()</span><br><span class="line">                .personModule(<span class="keyword">new</span> PersonModule())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>6.单元测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersonWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.pencil.write();</span><br><span class="line">    person.fountainPen.write();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果打印如下</span></span><br><span class="line">... Pen: 铅笔开始写字了</span><br><span class="line">... Pen: 钢笔开始写字了</span><br></pre></td></tr></table></figure><blockquote><p>结论：当我们在<code>@Module</code>标注的类中需要提供多种返回对象相同的方法时，需要使用 <code>@Qulifier</code> 自定义注解加以区分</p></blockquote><h4 id="3-学习-Scope-的使用"><a href="#3-学习-Scope-的使用" class="headerlink" title="3. 学习 @Scope 的使用"></a>3. 学习 <code>@Scope</code> 的使用</h4><p>还是这个栗子：小明有一个笔可以用来写字</p><p>分析：小明是一个对象(Person),笔是一个对象(Pen),写字是笔的动作(write)。我们在Person对象中如何保证Pen只创建一次呢，直接看代码：</p><blockquote><p>1.创建 <code>Pen</code> 类，就是一个普通对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pen</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Pen"</span>, name + <span class="string">" Create"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Pen"</span>, name + <span class="string">"开始写字了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.创建 <code>PersonScope</code> 注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PersonScope &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3.创建 <code>PersonModule</code> 类，<code>@PersonScope</code>标注方法名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PersonScope</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pen <span class="title">providePencilPen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pen(<span class="string">"铅笔"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>4.创建 <code>PersonComponent</code> 类，<code>@PersonScope</code>标注类名</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PersonScope</span></span><br><span class="line"><span class="meta">@Component</span>(modules = PersonModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(Person p)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>5.创建 <code>Person</code> 类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> Pen pencil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> Pen pencil2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DaggerPersonComponent.builder()</span><br><span class="line">                .personModule(<span class="keyword">new</span> PersonModule())</span><br><span class="line">                .build()</span><br><span class="line">                .inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>6.进行单元测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPersonWrite</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.pencil.write();</span><br><span class="line">    person.pencil2.write();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果打印如下</span></span><br><span class="line">... Pen: 铅笔 Create</span><br><span class="line">... Pen: 铅笔开始写字了</span><br><span class="line">... Pen: 铅笔开始写字了</span><br></pre></td></tr></table></figure><blockquote><p>结论： <code>@Scope</code> 限定作用域，实现局部单例的</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>现在我们回顾下<code>dagger2</code>关键部分</p><p><img src="/2018/03/01/dagger2学习记录/dagger2基本图.png" alt="dagger2"></p><p>1.<code>@Inject</code> 用于标注构造函数，和成员属性，标注的成员属性不能是<code>private</code>修饰</p><p>2.<code>@Module</code> 标注类名，通常和<code>@Provides</code>配合使用，<code>@Provides</code> 用于标注方法，和<code>@Inject</code>标注构造函数作用一样，但优先级别要比<code>@Inject</code>要高</p><p>3.<code>@Component</code>用于标注接口或抽象类，为目标对象注入需要的对象</p><p>4.<code>@Qualifier</code>用于自定义注解，当目标对象中需要获取注入对象的多个实例时，分别定义多个自定义注解加以区分</p><p>5.<code>@Scope</code>用于自定义注解，目标对象中如果重复引用目标对象，使用<code>@Scope</code>定义自定义注解可以保证注入对象不会被重复创建</p>]]></content>
    
    <summary type="html">
    
      记录dagger2的知识点
    
    </summary>
    
      <category term="默认分类" scheme="http://lingchenjie.club/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="android" scheme="http://lingchenjie.club/tags/android/"/>
    
      <category term="框架" scheme="http://lingchenjie.club/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="dagger2" scheme="http://lingchenjie.club/tags/dagger2/"/>
    
  </entry>
  
</feed>
